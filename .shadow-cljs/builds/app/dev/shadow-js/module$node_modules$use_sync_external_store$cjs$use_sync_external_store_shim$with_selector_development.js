["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js"],"~:js","shadow$provide.module$node_modules$use_sync_external_store$cjs$use_sync_external_store_shim$with_selector_development = function(global, require, module, exports) {\n  (function() {\n    function is(x, y) {\n      return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;\n    }\n    \"undefined\" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && \"function\" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());\n    var React = require(\"module$node_modules$react$index\"), shim = require(\"module$node_modules$use_sync_external_store$shim$index\"), objectIs = \"function\" === typeof Object.is ? Object.is : is, useSyncExternalStore = shim.useSyncExternalStore, useRef = React.useRef, useEffect = React.useEffect, useMemo = React.useMemo, useDebugValue = React.useDebugValue;\n    exports.useSyncExternalStoreWithSelector = function(subscribe, getSnapshot, getServerSnapshot, selector, isEqual) {\n      var instRef = useRef(null);\n      if (null === instRef.current) {\n        var inst = {hasValue:!1, value:null};\n        instRef.current = inst;\n      } else {\n        inst = instRef.current;\n      }\n      instRef = useMemo(function() {\n        var hasMemo = !1, memoizedSnapshot, memoizedSelection, memoizedSelector = function(nextSnapshot) {\n          if (!hasMemo) {\n            hasMemo = !0;\n            memoizedSnapshot = nextSnapshot;\n            nextSnapshot = selector(nextSnapshot);\n            if (void 0 !== isEqual && inst.hasValue) {\n              var currentSelection = inst.value;\n              if (isEqual(currentSelection, nextSnapshot)) {\n                return memoizedSelection = currentSelection;\n              }\n            }\n            return memoizedSelection = nextSnapshot;\n          }\n          currentSelection = memoizedSelection;\n          if (objectIs(memoizedSnapshot, nextSnapshot)) {\n            return currentSelection;\n          }\n          var nextSelection = selector(nextSnapshot);\n          if (void 0 !== isEqual && isEqual(currentSelection, nextSelection)) {\n            return currentSelection;\n          }\n          memoizedSnapshot = nextSnapshot;\n          return memoizedSelection = nextSelection;\n        }, maybeGetServerSnapshot = void 0 === getServerSnapshot ? null : getServerSnapshot;\n        return [function() {\n          return memoizedSelector(getSnapshot());\n        }, null === maybeGetServerSnapshot ? void 0 : function() {\n          return memoizedSelector(maybeGetServerSnapshot());\n        }];\n      }, [getSnapshot, getServerSnapshot, selector, isEqual]);\n      var value = useSyncExternalStore(subscribe, instRef[0], instRef[1]);\n      useEffect(function() {\n        inst.hasValue = !0;\n        inst.value = value;\n      }, [value]);\n      useDebugValue(value);\n      return value;\n    };\n    \"undefined\" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && \"function\" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());\n  })();\n};\n","~:source","shadow$provide[\"module$node_modules$use_sync_external_store$cjs$use_sync_external_store_shim$with_selector_development\"] = function(global,require,module,exports) {\n/**\n * @license React\n * use-sync-external-store-shim/with-selector.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n\n          'use strict';\n\n/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\nif (\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===\n    'function'\n) {\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\n}\n          var React = require('react');\nvar shim = require('use-sync-external-store/shim');\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x, y) {\n  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare\n  ;\n}\n\nvar objectIs = typeof Object.is === 'function' ? Object.is : is;\n\nvar useSyncExternalStore = shim.useSyncExternalStore;\n\n// for CommonJS interop.\n\nvar useRef = React.useRef,\n    useEffect = React.useEffect,\n    useMemo = React.useMemo,\n    useDebugValue = React.useDebugValue; // Same as useSyncExternalStore, but supports selector and isEqual arguments.\n\nfunction useSyncExternalStoreWithSelector(subscribe, getSnapshot, getServerSnapshot, selector, isEqual) {\n  // Use this to track the rendered snapshot.\n  var instRef = useRef(null);\n  var inst;\n\n  if (instRef.current === null) {\n    inst = {\n      hasValue: false,\n      value: null\n    };\n    instRef.current = inst;\n  } else {\n    inst = instRef.current;\n  }\n\n  var _useMemo = useMemo(function () {\n    // Track the memoized state using closure variables that are local to this\n    // memoized instance of a getSnapshot function. Intentionally not using a\n    // useRef hook, because that state would be shared across all concurrent\n    // copies of the hook/component.\n    var hasMemo = false;\n    var memoizedSnapshot;\n    var memoizedSelection;\n\n    var memoizedSelector = function (nextSnapshot) {\n      if (!hasMemo) {\n        // The first time the hook is called, there is no memoized result.\n        hasMemo = true;\n        memoizedSnapshot = nextSnapshot;\n\n        var _nextSelection = selector(nextSnapshot);\n\n        if (isEqual !== undefined) {\n          // Even if the selector has changed, the currently rendered selection\n          // may be equal to the new selection. We should attempt to reuse the\n          // current value if possible, to preserve downstream memoizations.\n          if (inst.hasValue) {\n            var currentSelection = inst.value;\n\n            if (isEqual(currentSelection, _nextSelection)) {\n              memoizedSelection = currentSelection;\n              return currentSelection;\n            }\n          }\n        }\n\n        memoizedSelection = _nextSelection;\n        return _nextSelection;\n      } // We may be able to reuse the previous invocation's result.\n\n\n      // We may be able to reuse the previous invocation's result.\n      var prevSnapshot = memoizedSnapshot;\n      var prevSelection = memoizedSelection;\n\n      if (objectIs(prevSnapshot, nextSnapshot)) {\n        // The snapshot is the same as last time. Reuse the previous selection.\n        return prevSelection;\n      } // The snapshot has changed, so we need to compute a new selection.\n\n\n      // The snapshot has changed, so we need to compute a new selection.\n      var nextSelection = selector(nextSnapshot); // If a custom isEqual function is provided, use that to check if the data\n      // has changed. If it hasn't, return the previous selection. That signals\n      // to React that the selections are conceptually equal, and we can bail\n      // out of rendering.\n\n      // If a custom isEqual function is provided, use that to check if the data\n      // has changed. If it hasn't, return the previous selection. That signals\n      // to React that the selections are conceptually equal, and we can bail\n      // out of rendering.\n      if (isEqual !== undefined && isEqual(prevSelection, nextSelection)) {\n        return prevSelection;\n      }\n\n      memoizedSnapshot = nextSnapshot;\n      memoizedSelection = nextSelection;\n      return nextSelection;\n    }; // Assigning this to a constant so that Flow knows it can't change.\n\n\n    // Assigning this to a constant so that Flow knows it can't change.\n    var maybeGetServerSnapshot = getServerSnapshot === undefined ? null : getServerSnapshot;\n\n    var getSnapshotWithSelector = function () {\n      return memoizedSelector(getSnapshot());\n    };\n\n    var getServerSnapshotWithSelector = maybeGetServerSnapshot === null ? undefined : function () {\n      return memoizedSelector(maybeGetServerSnapshot());\n    };\n    return [getSnapshotWithSelector, getServerSnapshotWithSelector];\n  }, [getSnapshot, getServerSnapshot, selector, isEqual]),\n      getSelection = _useMemo[0],\n      getServerSelection = _useMemo[1];\n\n  var value = useSyncExternalStore(subscribe, getSelection, getServerSelection);\n  useEffect(function () {\n    inst.hasValue = true;\n    inst.value = value;\n  }, [value]);\n  useDebugValue(value);\n  return value;\n}\n\nexports.useSyncExternalStoreWithSelector = useSyncExternalStoreWithSelector;\n          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\nif (\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===\n    'function'\n) {\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\n}\n        \n  })();\n}\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$react$index","~$shadow.js","~$module$node_modules$use_sync_external_store$shim$index"]],"~:properties",["^5",["hasValue","value","current","useSyncExternalStoreWithSelector"]],"~:compiled-at",1730300623553,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$use_sync_external_store$cjs$use_sync_external_store_shim$with_selector_development.js\",\n\"lineCount\":58,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$use_sync_external_store$cjs$use_sync_external_store_shim$with_selector_development\\\"] = function(global,require,module,exports) {\\n/**\\n * @license React\\n * use-sync-external-store-shim/with-selector.development.js\\n *\\n * Copyright (c) Facebook, Inc. and its affiliates.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\n'use strict';\\n\\nif (process.env.NODE_ENV !== \\\"production\\\") {\\n  (function() {\\n\\n          'use strict';\\n\\n/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\\nif (\\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===\\n    'function'\\n) {\\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\\n}\\n          var React = require('react');\\nvar shim = require('use-sync-external-store/shim');\\n\\n/**\\n * inlined Object.is polyfill to avoid requiring consumers ship their own\\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\\n */\\nfunction is(x, y) {\\n  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare\\n  ;\\n}\\n\\nvar objectIs = typeof Object.is === 'function' ? Object.is : is;\\n\\nvar useSyncExternalStore = shim.useSyncExternalStore;\\n\\n// for CommonJS interop.\\n\\nvar useRef = React.useRef,\\n    useEffect = React.useEffect,\\n    useMemo = React.useMemo,\\n    useDebugValue = React.useDebugValue; // Same as useSyncExternalStore, but supports selector and isEqual arguments.\\n\\nfunction useSyncExternalStoreWithSelector(subscribe, getSnapshot, getServerSnapshot, selector, isEqual) {\\n  // Use this to track the rendered snapshot.\\n  var instRef = useRef(null);\\n  var inst;\\n\\n  if (instRef.current === null) {\\n    inst = {\\n      hasValue: false,\\n      value: null\\n    };\\n    instRef.current = inst;\\n  } else {\\n    inst = instRef.current;\\n  }\\n\\n  var _useMemo = useMemo(function () {\\n    // Track the memoized state using closure variables that are local to this\\n    // memoized instance of a getSnapshot function. Intentionally not using a\\n    // useRef hook, because that state would be shared across all concurrent\\n    // copies of the hook/component.\\n    var hasMemo = false;\\n    var memoizedSnapshot;\\n    var memoizedSelection;\\n\\n    var memoizedSelector = function (nextSnapshot) {\\n      if (!hasMemo) {\\n        // The first time the hook is called, there is no memoized result.\\n        hasMemo = true;\\n        memoizedSnapshot = nextSnapshot;\\n\\n        var _nextSelection = selector(nextSnapshot);\\n\\n        if (isEqual !== undefined) {\\n          // Even if the selector has changed, the currently rendered selection\\n          // may be equal to the new selection. We should attempt to reuse the\\n          // current value if possible, to preserve downstream memoizations.\\n          if (inst.hasValue) {\\n            var currentSelection = inst.value;\\n\\n            if (isEqual(currentSelection, _nextSelection)) {\\n              memoizedSelection = currentSelection;\\n              return currentSelection;\\n            }\\n          }\\n        }\\n\\n        memoizedSelection = _nextSelection;\\n        return _nextSelection;\\n      } // We may be able to reuse the previous invocation's result.\\n\\n\\n      // We may be able to reuse the previous invocation's result.\\n      var prevSnapshot = memoizedSnapshot;\\n      var prevSelection = memoizedSelection;\\n\\n      if (objectIs(prevSnapshot, nextSnapshot)) {\\n        // The snapshot is the same as last time. Reuse the previous selection.\\n        return prevSelection;\\n      } // The snapshot has changed, so we need to compute a new selection.\\n\\n\\n      // The snapshot has changed, so we need to compute a new selection.\\n      var nextSelection = selector(nextSnapshot); // If a custom isEqual function is provided, use that to check if the data\\n      // has changed. If it hasn't, return the previous selection. That signals\\n      // to React that the selections are conceptually equal, and we can bail\\n      // out of rendering.\\n\\n      // If a custom isEqual function is provided, use that to check if the data\\n      // has changed. If it hasn't, return the previous selection. That signals\\n      // to React that the selections are conceptually equal, and we can bail\\n      // out of rendering.\\n      if (isEqual !== undefined && isEqual(prevSelection, nextSelection)) {\\n        return prevSelection;\\n      }\\n\\n      memoizedSnapshot = nextSnapshot;\\n      memoizedSelection = nextSelection;\\n      return nextSelection;\\n    }; // Assigning this to a constant so that Flow knows it can't change.\\n\\n\\n    // Assigning this to a constant so that Flow knows it can't change.\\n    var maybeGetServerSnapshot = getServerSnapshot === undefined ? null : getServerSnapshot;\\n\\n    var getSnapshotWithSelector = function () {\\n      return memoizedSelector(getSnapshot());\\n    };\\n\\n    var getServerSnapshotWithSelector = maybeGetServerSnapshot === null ? undefined : function () {\\n      return memoizedSelector(maybeGetServerSnapshot());\\n    };\\n    return [getSnapshotWithSelector, getServerSnapshotWithSelector];\\n  }, [getSnapshot, getServerSnapshot, selector, isEqual]),\\n      getSelection = _useMemo[0],\\n      getServerSelection = _useMemo[1];\\n\\n  var value = useSyncExternalStore(subscribe, getSelection, getServerSelection);\\n  useEffect(function () {\\n    inst.hasValue = true;\\n    inst.value = value;\\n  }, [value]);\\n  useDebugValue(value);\\n  return value;\\n}\\n\\nexports.useSyncExternalStoreWithSelector = useSyncExternalStoreWithSelector;\\n          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\\nif (\\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===\\n    'function'\\n) {\\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\\n}\\n        \\n  })();\\n}\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"is\",\"x\",\"y\",\"__REACT_DEVTOOLS_GLOBAL_HOOK__\",\"registerInternalModuleStart\",\"Error\",\"React\",\"shim\",\"objectIs\",\"Object\",\"useSyncExternalStore\",\"useRef\",\"useEffect\",\"useMemo\",\"useDebugValue\",\"useSyncExternalStoreWithSelector\",\"subscribe\",\"getSnapshot\",\"getServerSnapshot\",\"selector\",\"isEqual\",\"instRef\",\"current\",\"inst\",\"hasValue\",\"value\",\"_useMemo\",\"hasMemo\",\"memoizedSnapshot\",\"memoizedSelection\",\"memoizedSelector\",\"nextSnapshot\",\"_nextSelection\",\"undefined\",\"currentSelection\",\"prevSelection\",\"nextSelection\",\"maybeGetServerSnapshot\",\"getSnapshotWithSelector\",\"getServerSnapshotWithSelector\",\"getSelection\",\"getServerSelection\",\"registerInternalModuleStop\"]\n}\n"]