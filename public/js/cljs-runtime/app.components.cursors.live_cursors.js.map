{"version":3,"sources":["app/components/cursors/live_cursors.cljs"],"mappings":";AAKA,mDAAA,nDAAMA,8GACHC;AADH,AAEE,kBAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;aAAA,AAAAE,4CAAAF,eAAA,pEAAaG;AAAb,AACE,YAAA,ZAACC,4BAAgCD;;AACjC,oDAAA,7CAACE,8EACK,AAACC,4CAAI,WAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAP,4BAAAO;WAAAA,PAAwCG;mBAAxC,AAAAT,4CAAAM,eAAA,1EAAaC;eAAb,AAAAP,4CAAAM,eAAA,tEAA0BE;AAA1B,AACE,oBAAMA;AAAN,AACE,YAAA,ZAACN,8BAAkCM;;AACnC,YAAA,ZAACN,kCAAsCK;;AACvC,IAAMI,cAAY,AAACC,gBAAMC;IACnBC,eAAa,AAACC,6CAAK,AAACC,cAAIT,aAAaI,aAAaE;IADxDH,aAE+BF;IAF/BE,iBAAA,AAAAX,4BAAAW;aAAA,AAAAV,4CAAAU,eAAA,pEAEcO;cAFd,AAAAjB,4CAAAU,eAAA,rEAEqBQ;AAFrB,AAAA,+HAAA,2CAAA,iEAAA,oEAAA,oIAAA,sIAAA,/dAGGC,oIAA8BZ,oEACAO,4DACA,AAAA,6EAAIG,wDACJ,AAAA,8EAAIA,mEACJC;;AAVnC;;GAWF,mHAAA,2EAAA,9LAACE,0DAAQnB","names":["app.components.cursors.live-cursors/live-cursors","props","p__14206","map__14207","cljs.core/--destructure-map","cljs.core.get","others","js/console.log","cljs.core.into","cljs.core.map","p__14208","map__14209","connectionId","presence","item","map__14210","color-count","cljs.core/count","app.constants.index/colors","random-color","cljs.core.take","cljs.core/mod","cursor","message","app.components.cursors.cursor/cursor","cljs.core.js__GT_clj"],"sourcesContent":["(ns app.components.cursors.live-cursors\n  (:require\n   [app.components.cursors.cursor :as cursor]\n   [app.constants.index :as colors]))\n\n(defn live-cursors\n  [props]\n  (fn [{:keys [others]}]\n    (js/console.log \"others ******\"  others)\n    (into []\n          (map (fn [{:keys [connectionId presence] :as item}]\n                 (when presence\n                   (js/console.log \"presence ******\"  presence)\n                   (js/console.log \"connectionId ******\"  connectionId)\n                   (let [color-count (count colors/colors)\n                         random-color (take (mod connectionId color-count) colors/colors)\n                         {:keys [cursor message]} presence]\n                     [cursor/cursor {:key           connectionId\n                                     :color         random-color\n                                     :x             (:x cursor)\n                                     :y             (:y cursor)\n                                     :message       message}])))\n               (js->clj others :keywordize-keys true)))))\n\n\n;; (defn live-cursors\n;;   [props]\n;;   (fn [{:keys [others]}]\n;;     (js/console.log \"others ******\"  others)\n;;     (reduce (fn [acc {:keys [connectionId presence]}]\n;;               (when presence\n;;                 (js/console.log \"presence ******\"  presence)\n;;                 (js/console.log \"connectionId ******\"  connectionId))\n;;               (if (some? (:cursor presence))\n;;                 (let [color-count (count colors/colors)\n;;                       random-color (take (mod connectionId color-count) colors/colors)]\n;;                   (conj acc [cursor/cursor {:key           connectionId\n;;                                             :color         random-color\n;;                                             :x             (-> presence .-cursor .-x)\n;;                                             :y             (-> presence .-cursor .-y)\n;;                                             :message       (-> presence .-message)}]))\n;;                 acc))\n;;             []\n;;             others)))"]}