{"version":3,"sources":["react/core.cljs"],"mappings":";;AAKA,wBAAA,xBAAMA,wDAAYC,QAAQC;AAA1B,AACE,OAACC,0CAAgBF,QAAQC;;AAE3B,0BAAA,1BAAME,4DAAcC,SAASH;AAA7B,AACE,IAAMI,QAAM,6CAAA,2CAAA,sEAAA,0DAAA,xNAACC,qJAAgBF,8DACJH,uEACO,CAACG,yCAAAA,2CAAAA;AAFjC,AAGE,kBAAKG;AAAL,AACE,GAAI,AAACC,gDAAK,AAAA,mFAAA,AAAAC,gBAAQJ,QAAOE;AACvB,AACE,yEAAA,zEAACG,mDAAML,MAAMM,qEAAYJ;;AACzB,gFAAA,zEAACG,mDAAML,MAAMM,kFAAmB,CAACP,yCAAAA,2CAAAA;;AACnC,OAAA,gGAAA,AAAAK,gBAAeJ","names":["react.core/use-effect","handler","deps","js/module$node_modules$react$index.useEffect","react.core/use-callback","callback","state","cljs.core.atom","new-deps","cljs.core.not_EQ_","cljs.core/deref","cljs.core.swap_BANG_","cljs.core/assoc"],"sourcesContent":["(ns react.core\n  (:require\n   [\"react\" :as react]))\n\n\n(defn use-effect [handler deps]\n  (react/useEffect handler deps))\n\n(defn use-callback [callback deps]\n  (let [state (atom {:callback callback\n                     :deps deps\n                     :memoized-fn (callback)})]\n    (fn [new-deps]\n      (if (not= (:deps @state) new-deps)\n        (do \n          (swap! state assoc :deps new-deps)\n          (swap! state assoc :memoized-fn (callback)))\n        (:memoized-fn @state)))))"]}