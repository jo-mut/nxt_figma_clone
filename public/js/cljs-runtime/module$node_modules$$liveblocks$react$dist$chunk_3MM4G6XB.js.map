{
"version":3,
"file":"module$node_modules$$liveblocks$react$dist$chunk_3MM4G6XB.js",
"lineCount":1873,
"mappings":"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",
"sources":["node_modules/@liveblocks/react/dist/chunk-3MM4G6XB.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$liveblocks$react$dist$chunk_3MM4G6XB\"] = function(global,require,module,exports) {\n\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true}); function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = obj[key]; } } } newObj.default = obj; return newObj; } } function _nullishCoalesce(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } } function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }// src/contexts.ts\nvar _react = require('react'); var React = _interopRequireWildcard(_react); var React4 = _interopRequireWildcard(_react); var React3 = _interopRequireWildcard(_react);\nvar RoomContext = React.createContext(null);\nfunction useRoomOrNull() {\n  return React.useContext(RoomContext);\n}\nfunction useIsInsideRoom() {\n  const room = useRoomOrNull();\n  return room !== null;\n}\n\n// src/liveblocks.tsx\n\n\n\n\n\n\n\nvar _core = require('@liveblocks/core');\n\n\n\n\n\n\n\nvar _indexjs = require('use-sync-external-store/shim/index.js');\nvar _withselectorjs = require('use-sync-external-store/shim/with-selector.js');\n\n// src/config.ts\nvar SECONDS = 1e3;\nvar MINUTES = 60 * SECONDS;\nvar config = {\n  NOTIFICATIONS_POLL_INTERVAL: 1 * MINUTES,\n  NOTIFICATIONS_MAX_STALE_TIME: 5 * SECONDS,\n  ROOM_THREADS_POLL_INTERVAL: 5 * MINUTES,\n  ROOM_THREADS_MAX_STALE_TIME: 5 * SECONDS,\n  USER_THREADS_POLL_INTERVAL: 1 * MINUTES,\n  USER_THREADS_MAX_STALE_TIME: 5 * SECONDS,\n  HISTORY_VERSIONS_POLL_INTERVAL: 1 * MINUTES,\n  HISTORY_VERSIONS_MAX_STALE_TIME: 5 * SECONDS,\n  NOTIFICATION_SETTINGS_POLL_INTERVAL: 1 * MINUTES,\n  NOTIFICATION_SETTINGS_MAX_STALE_TIME: 5 * SECONDS\n};\n\n// src/lib/shallow2.ts\n\nfunction shallow2(a, b) {\n  if (!_core.isPlainObject.call(void 0, a) || !_core.isPlainObject.call(void 0, b)) {\n    return _core.shallow.call(void 0, a, b);\n  }\n  const keysA = Object.keys(a);\n  if (keysA.length !== Object.keys(b).length) {\n    return false;\n  }\n  return keysA.every(\n    (key) => Object.prototype.hasOwnProperty.call(b, key) && _core.shallow.call(void 0, a[key], b[key])\n  );\n}\n\n// src/lib/use-initial.ts\n\n\n// src/lib/use-latest.ts\n\nfunction useLatest(value) {\n  const ref = _react.useRef.call(void 0, value);\n  _react.useEffect.call(void 0, () => {\n    ref.current = value;\n  }, [value]);\n  return ref;\n}\n\n// src/lib/use-initial.ts\nvar noop = (state) => state;\nfunction useInitial(value) {\n  return _react.useReducer.call(void 0, noop, value)[0];\n}\nfunction useInitialUnlessFunction(latestValue) {\n  const frozenValue = useInitial(latestValue);\n  if (typeof frozenValue === \"function\") {\n    const ref = useLatest(latestValue);\n    return _react.useCallback.call(void 0, (...args) => ref.current(...args), [\n      ref\n    ]);\n  } else {\n    return frozenValue;\n  }\n}\n\n// src/lib/use-polyfill.ts\nvar use = (\n  // React.use ||\n  (promise) => {\n    if (promise.status === \"pending\") {\n      throw promise;\n    } else if (promise.status === \"fulfilled\") {\n      return promise.value;\n    } else if (promise.status === \"rejected\") {\n      throw promise.reason;\n    } else {\n      promise.status = \"pending\";\n      promise.then(\n        (v) => {\n          promise.status = \"fulfilled\";\n          promise.value = v;\n        },\n        (e) => {\n          promise.status = \"rejected\";\n          promise.reason = e;\n        }\n      );\n      throw promise;\n    }\n  }\n);\n\n// src/umbrella-store.ts\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// src/lib/autobind.ts\nfunction autobind(self) {\n  const seen = /* @__PURE__ */ new Set();\n  seen.add(\"constructor\");\n  let obj = self.constructor.prototype;\n  do {\n    for (const key of Reflect.ownKeys(obj)) {\n      if (seen.has(key)) continue;\n      const descriptor = Reflect.getOwnPropertyDescriptor(obj, key);\n      if (typeof _optionalChain([descriptor, 'optionalAccess', _ => _.value]) === \"function\") {\n        seen.add(key);\n        self[key] = self[key].bind(self);\n      }\n    }\n  } while ((obj = Reflect.getPrototypeOf(obj)) && obj !== Object.prototype);\n}\n\n// src/ThreadDB.ts\n\n\n// src/lib/guards.ts\n\nfunction isStartsWith(blob) {\n  return _core.isPlainObject.call(void 0, blob) && isString(blob.startsWith);\n}\nfunction isString(value) {\n  return typeof value === \"string\";\n}\n\n// src/lib/querying.ts\nfunction makeThreadsFilter(query) {\n  return (thread) => matchesQuery(thread, query) && matchesMetadata(thread, query);\n}\nfunction matchesQuery(thread, q) {\n  return q.resolved === void 0 || thread.resolved === q.resolved;\n}\nfunction matchesMetadata(thread, q) {\n  const metadata = thread.metadata;\n  return q.metadata === void 0 || Object.entries(q.metadata).every(\n    ([key, op]) => (\n      // NOTE: `op` can be explicitly-`undefined` here, which ideally would not\n      // mean \"filter for absence\" like it does now, as this does not match the\n      // backend behavior at the moment. For an in-depth discussion, see\n      // https://liveblocks.slack.com/archives/C02PZL7QAAW/p1728546988505989\n      matchesOperator(metadata[key], op)\n    )\n  );\n}\nfunction matchesOperator(value, op) {\n  if (isStartsWith(op)) {\n    return isString(value) && value.startsWith(op.startsWith);\n  } else {\n    return value === op;\n  }\n}\n\n// src/ThreadDB.ts\nfunction sanitizeThread(thread) {\n  if (thread.deletedAt) {\n    if (thread.comments.length > 0) {\n      return { ...thread, comments: [] };\n    }\n  }\n  const hasComment = thread.comments.some((c) => !c.deletedAt);\n  if (!hasComment) {\n    return { ...thread, deletedAt: /* @__PURE__ */ new Date(), comments: [] };\n  }\n  return thread;\n}\nvar ThreadDB = class _ThreadDB {\n  // The version is auto-incremented on every mutation and can be used as a reliable indicator to tell if the contents of the thread pool has changed\n  constructor() {\n    this._asc = _core.SortedList.from([], (t1, t2) => {\n      const d1 = t1.createdAt;\n      const d2 = t2.createdAt;\n      return d1 < d2 ? true : d1 === d2 ? t1.id < t2.id : false;\n    });\n    this._desc = _core.SortedList.from([], (t1, t2) => {\n      const d2 = t2.updatedAt;\n      const d1 = t1.updatedAt;\n      return d2 < d1 ? true : d2 === d1 ? t2.id < t1.id : false;\n    });\n    this._byId = /* @__PURE__ */ new Map();\n    this._version = 0;\n  }\n  //\n  // Public APIs\n  //\n  clone() {\n    const newPool = new _ThreadDB();\n    newPool._byId = new Map(this._byId);\n    newPool._asc = this._asc.clone();\n    newPool._desc = this._desc.clone();\n    newPool._version = this._version;\n    return newPool;\n  }\n  /** Gets the transaction count for this DB. Increments any time the DB is modified. */\n  get version() {\n    return this._version;\n  }\n  /** Returns an existing thread by ID. Will never return a deleted thread. */\n  get(threadId) {\n    const thread = this.getEvenIfDeleted(threadId);\n    return _optionalChain([thread, 'optionalAccess', _2 => _2.deletedAt]) ? void 0 : thread;\n  }\n  /** Returns the (possibly deleted) thread by ID. */\n  getEvenIfDeleted(threadId) {\n    return this._byId.get(threadId);\n  }\n  /** Adds or updates a thread in the DB. If the newly given thread is a deleted one, it will get deleted. */\n  upsert(thread) {\n    thread = sanitizeThread(thread);\n    const id = thread.id;\n    const toRemove = this._byId.get(id);\n    if (toRemove) {\n      if (toRemove.deletedAt) return;\n      this._asc.remove(toRemove);\n      this._desc.remove(toRemove);\n    }\n    if (!thread.deletedAt) {\n      this._asc.add(thread);\n      this._desc.add(thread);\n    }\n    this._byId.set(id, thread);\n    this.touch();\n  }\n  /** Like .upsert(), except it won't update if a thread by this ID already exists. */\n  // TODO Consider renaming this to just .upsert(). I'm not sure if we really\n  // TODO need the raw .upsert(). Would be nice if this behavior was the default.\n  upsertIfNewer(thread) {\n    const existing = this.get(thread.id);\n    if (!existing || thread.updatedAt >= existing.updatedAt) {\n      this.upsert(thread);\n    }\n  }\n  /**\n   * Marks a thread as deleted. It will no longer pop up in .findMany()\n   * queries, but it can still be accessed via `.getEvenIfDeleted()`.\n   */\n  delete(threadId, deletedAt) {\n    const existing = this._byId.get(threadId);\n    if (existing && !existing.deletedAt) {\n      this.upsert({ ...existing, deletedAt, updatedAt: deletedAt });\n    }\n  }\n  /**\n   * Returns all threads matching a given roomId and query. If roomId is not\n   * specified, it will return all threads matching the query, across all\n   * rooms.\n   *\n   * Returns the results in the requested order. Please note:\n   *   'asc'  means by createdAt ASC\n   *   'desc' means by updatedAt DESC\n   *\n   * Will never return deleted threads in the result.\n   */\n  findMany(roomId, query, direction) {\n    const index = direction === \"desc\" ? this._desc : this._asc;\n    const crit = [];\n    if (roomId !== void 0) {\n      crit.push((t) => t.roomId === roomId);\n    }\n    crit.push(makeThreadsFilter(query));\n    return Array.from(index.filter((t) => crit.every((pred) => pred(t))));\n  }\n  //\n  // Private APIs\n  //\n  touch() {\n    ++this._version;\n  }\n};\n\n// src/umbrella-store.ts\nfunction makeRoomThreadsQueryKey(roomId, query) {\n  return `${roomId}-${_core.stringify.call(void 0, _nullishCoalesce(query, () => ( {})))}`;\n}\nfunction makeUserThreadsQueryKey(query) {\n  return `USER_THREADS:${_core.stringify.call(void 0, _nullishCoalesce(query, () => ( {})))}`;\n}\nfunction makeNotificationSettingsQueryKey(roomId) {\n  return `${roomId}:NOTIFICATION_SETTINGS`;\n}\nfunction makeVersionsQueryKey(roomId) {\n  return `${roomId}-VERSIONS`;\n}\nfunction usify(promise) {\n  if (\"status\" in promise) {\n    return promise;\n  }\n  const usable = promise;\n  usable.status = \"pending\";\n  usable.then(\n    (value) => {\n      usable.status = \"fulfilled\";\n      usable.value = value;\n    },\n    (err) => {\n      usable.status = \"rejected\";\n      usable.reason = err;\n    }\n  );\n  return usable;\n}\nvar noop2 = Promise.resolve();\nvar ASYNC_LOADING = Object.freeze({ isLoading: true });\nvar PaginatedResource = class {\n  constructor(fetchPage) {\n    this._cachedPromise = null;\n    this._paginationState = null;\n    this._fetchPage = fetchPage;\n    this._eventSource = _core.makeEventSource.call(void 0, );\n    this._pendingFetchMore = null;\n    this.observable = this._eventSource.observable;\n    autobind(this);\n  }\n  patchPaginationState(patch) {\n    const state = this._paginationState;\n    if (state === null) return;\n    this._paginationState = { ...state, ...patch };\n    this._eventSource.notify();\n  }\n  async _fetchMore() {\n    const state = this._paginationState;\n    if (!_optionalChain([state, 'optionalAccess', _3 => _3.cursor])) {\n      return;\n    }\n    this.patchPaginationState({ isFetchingMore: true });\n    try {\n      const nextCursor = await this._fetchPage(state.cursor);\n      this.patchPaginationState({\n        cursor: nextCursor,\n        fetchMoreError: void 0,\n        isFetchingMore: false\n      });\n    } catch (err) {\n      this.patchPaginationState({\n        isFetchingMore: false,\n        fetchMoreError: err\n      });\n    }\n  }\n  fetchMore() {\n    const state = this._paginationState;\n    if (_optionalChain([state, 'optionalAccess', _4 => _4.cursor]) === null) {\n      return noop2;\n    }\n    if (!this._pendingFetchMore) {\n      this._pendingFetchMore = this._fetchMore().finally(() => {\n        this._pendingFetchMore = null;\n      });\n    }\n    return this._pendingFetchMore;\n  }\n  get() {\n    const usable = this._cachedPromise;\n    if (usable === null || usable.status === \"pending\") {\n      return ASYNC_LOADING;\n    }\n    if (usable.status === \"rejected\") {\n      return { isLoading: false, error: usable.reason };\n    }\n    const state = this._paginationState;\n    return {\n      isLoading: false,\n      data: {\n        fetchMore: this.fetchMore,\n        isFetchingMore: state.isFetchingMore,\n        fetchMoreError: state.fetchMoreError,\n        hasFetchedAll: state.cursor === null\n      }\n    };\n  }\n  waitUntilLoaded() {\n    if (this._cachedPromise) {\n      return this._cachedPromise;\n    }\n    const initialFetcher = _core.autoRetry.call(void 0, \n      () => this._fetchPage(\n        /* cursor */\n        void 0\n      ),\n      5,\n      [5e3, 5e3, 1e4, 15e3]\n    );\n    const promise = usify(\n      initialFetcher.then((cursor) => {\n        this._paginationState = {\n          cursor,\n          isFetchingMore: false,\n          fetchMoreError: void 0\n        };\n      })\n    );\n    promise.then(\n      () => this._eventSource.notify(),\n      () => {\n        this._eventSource.notify();\n        setTimeout(() => {\n          this._cachedPromise = null;\n          this._eventSource.notify();\n        }, 5e3);\n      }\n    );\n    this._cachedPromise = promise;\n    return promise;\n  }\n};\nvar SinglePageResource = class {\n  constructor(fetchPage) {\n    this._cachedPromise = null;\n    this._fetchPage = fetchPage;\n    this._eventSource = _core.makeEventSource.call(void 0, );\n    this.observable = this._eventSource.observable;\n    autobind(this);\n  }\n  get() {\n    const usable = this._cachedPromise;\n    if (usable === null || usable.status === \"pending\") {\n      return ASYNC_LOADING;\n    }\n    if (usable.status === \"rejected\") {\n      return { isLoading: false, error: usable.reason };\n    }\n    return {\n      isLoading: false,\n      data: void 0\n    };\n  }\n  waitUntilLoaded() {\n    if (this._cachedPromise) {\n      return this._cachedPromise;\n    }\n    const initialFetcher = _core.autoRetry.call(void 0, \n      () => this._fetchPage(),\n      5,\n      [5e3, 5e3, 1e4, 15e3]\n    );\n    const promise = usify(initialFetcher);\n    promise.then(\n      () => this._eventSource.notify(),\n      () => {\n        this._eventSource.notify();\n        setTimeout(() => {\n          this._cachedPromise = null;\n          this._eventSource.notify();\n        }, 5e3);\n      }\n    );\n    this._cachedPromise = promise;\n    return promise;\n  }\n};\nvar UmbrellaStore = class {\n  constructor(client) {\n    this._prevVersion = -1;\n    this._prevState = null;\n    this._stateCached = null;\n    // Notifications\n    this._notificationsLastRequestedAt = null;\n    // Room Threads\n    this._roomThreadsLastRequestedAtByRoom = /* @__PURE__ */ new Map();\n    this._roomThreads = /* @__PURE__ */ new Map();\n    // User Threads\n    this._userThreadsLastRequestedAt = null;\n    this._userThreads = /* @__PURE__ */ new Map();\n    // Room versions\n    this._roomVersions = /* @__PURE__ */ new Map();\n    this._roomVersionsLastRequestedAtByRoom = /* @__PURE__ */ new Map();\n    // Room notification settings\n    this._roomNotificationSettings = /* @__PURE__ */ new Map();\n    this._client = client[_core.kInternal].as();\n    const inboxFetcher = async (cursor) => {\n      const result = await this._client.getInboxNotifications({ cursor });\n      this.updateThreadsAndNotifications(\n        result.threads,\n        result.inboxNotifications\n      );\n      if (this._notificationsLastRequestedAt === null) {\n        this._notificationsLastRequestedAt = result.requestedAt;\n      }\n      const nextCursor = result.nextCursor;\n      return nextCursor;\n    };\n    this._notifications = new PaginatedResource(inboxFetcher);\n    this._notifications.observable.subscribe(\n      () => (\n        // Note that the store itself does not change, but it's only vehicle at\n        // the moment to trigger a re-render, so we'll do a no-op update here.\n        this._store.set((store) => ({ ...store }))\n      )\n    );\n    this._rawThreadsDB = new ThreadDB();\n    this._store = _core.createStore.call(void 0, {\n      optimisticUpdates: [],\n      notificationsById: {},\n      settingsByRoomId: {},\n      versionsByRoomId: {}\n    });\n    autobind(this);\n  }\n  get() {\n    const rawState = this._store.get();\n    if (this._prevVersion !== this._rawThreadsDB.version || // Note: Version check is only needed temporarily, until we can get rid of the Zustand-like update model\n    this._prevState !== rawState || this._stateCached === null) {\n      this._stateCached = internalToExternalState(rawState, this._rawThreadsDB);\n      this._prevState = rawState;\n      this._prevVersion = this._rawThreadsDB.version;\n    }\n    return this._stateCached;\n  }\n  batch(callback) {\n    return this._store.batch(callback);\n  }\n  getFullState() {\n    return this.get();\n  }\n  /**\n   * Returns the async result of the given query and room id. If the query is success,\n   * then it will return the threads that match that provided query and room id.\n   *\n   */\n  getRoomThreadsLoadingState(roomId, query) {\n    const queryKey = makeRoomThreadsQueryKey(roomId, query);\n    const paginatedResource = this._roomThreads.get(queryKey);\n    if (paginatedResource === void 0) {\n      return ASYNC_LOADING;\n    }\n    const asyncResult = paginatedResource.get();\n    if (asyncResult.isLoading || asyncResult.error) {\n      return asyncResult;\n    }\n    const threads = this.getFullState().threadsDB.findMany(\n      roomId,\n      _nullishCoalesce(query, () => ( {})),\n      \"asc\"\n    );\n    const page = asyncResult.data;\n    return {\n      isLoading: false,\n      threads,\n      hasFetchedAll: page.hasFetchedAll,\n      isFetchingMore: page.isFetchingMore,\n      fetchMoreError: page.fetchMoreError,\n      fetchMore: page.fetchMore\n    };\n  }\n  getUserThreadsLoadingState(query) {\n    const queryKey = makeUserThreadsQueryKey(query);\n    const paginatedResource = this._userThreads.get(queryKey);\n    if (paginatedResource === void 0) {\n      return ASYNC_LOADING;\n    }\n    const asyncResult = paginatedResource.get();\n    if (asyncResult.isLoading || asyncResult.error) {\n      return asyncResult;\n    }\n    const threads = this.getFullState().threadsDB.findMany(\n      void 0,\n      // Do _not_ filter by roomId\n      _nullishCoalesce(query, () => ( {})),\n      \"desc\"\n    );\n    const page = asyncResult.data;\n    return {\n      isLoading: false,\n      threads,\n      hasFetchedAll: page.hasFetchedAll,\n      isFetchingMore: page.isFetchingMore,\n      fetchMoreError: page.fetchMoreError,\n      fetchMore: page.fetchMore\n    };\n  }\n  // NOTE: This will read the async result, but WILL NOT start loading at the moment!\n  getInboxNotificationsLoadingState() {\n    const asyncResult = this._notifications.get();\n    if (asyncResult.isLoading || asyncResult.error) {\n      return asyncResult;\n    }\n    const page = asyncResult.data;\n    return {\n      isLoading: false,\n      inboxNotifications: this.getFullState().cleanedNotifications,\n      hasFetchedAll: page.hasFetchedAll,\n      isFetchingMore: page.isFetchingMore,\n      fetchMoreError: page.fetchMoreError,\n      fetchMore: page.fetchMore\n    };\n  }\n  // NOTE: This will read the async result, but WILL NOT start loading at the moment!\n  getNotificationSettingsLoadingState(roomId) {\n    const queryKey = makeNotificationSettingsQueryKey(roomId);\n    const resource = this._roomNotificationSettings.get(queryKey);\n    if (resource === void 0) {\n      return ASYNC_LOADING;\n    }\n    const asyncResult = resource.get();\n    if (asyncResult.isLoading || asyncResult.error) {\n      return asyncResult;\n    }\n    return {\n      isLoading: false,\n      settings: _core.nn.call(void 0, this.get().settingsByRoomId[roomId])\n    };\n  }\n  getRoomVersionsLoadingState(roomId) {\n    const queryKey = makeVersionsQueryKey(roomId);\n    const resource = this._roomVersions.get(queryKey);\n    if (resource === void 0) {\n      return ASYNC_LOADING;\n    }\n    const asyncResult = resource.get();\n    if (asyncResult.isLoading || asyncResult.error) {\n      return asyncResult;\n    }\n    return {\n      isLoading: false,\n      versions: Object.values(_nullishCoalesce(this.get().versionsByRoomId[roomId], () => ( {})))\n    };\n  }\n  /**\n   * @private Only used by the E2E test suite.\n   */\n  _hasOptimisticUpdates() {\n    return this._store.get().optimisticUpdates.length > 0;\n  }\n  subscribe(callback) {\n    return this._store.subscribe(callback);\n  }\n  // Direct low-level cache mutations ------------------------------------------------- {{{\n  mutateThreadsDB(mutate) {\n    const db = this._rawThreadsDB;\n    const old = db.version;\n    mutate(db);\n    if (old !== db.version) {\n      this._store.set((state) => ({ ...state }));\n    }\n  }\n  updateInboxNotificationsCache(mapFn) {\n    this._store.set((state) => {\n      const inboxNotifications = mapFn(state.notificationsById);\n      return inboxNotifications !== state.notificationsById ? { ...state, notificationsById: inboxNotifications } : state;\n    });\n  }\n  setNotificationSettings(roomId, settings) {\n    this._store.set((state) => ({\n      ...state,\n      settingsByRoomId: {\n        ...state.settingsByRoomId,\n        [roomId]: settings\n      }\n    }));\n  }\n  updateRoomVersions(roomId, versions) {\n    this._store.set((state) => {\n      const versionsById = Object.fromEntries(\n        versions.map((version2) => [version2.id, version2])\n      );\n      return {\n        ...state,\n        versionsByRoomId: {\n          ...state.versionsByRoomId,\n          [roomId]: {\n            // Merge with existing versions for the room, or start with an empty object\n            ..._nullishCoalesce(state.versionsByRoomId[roomId], () => ( {})),\n            ...versionsById\n          }\n        }\n      };\n    });\n  }\n  updateOptimisticUpdatesCache(mapFn) {\n    this._store.set((state) => ({\n      ...state,\n      optimisticUpdates: mapFn(state.optimisticUpdates)\n    }));\n  }\n  // ---------------------------------------------------------------------------------- }}}\n  /** @internal - Only call this method from unit tests. */\n  force_set(callback) {\n    return this._store.set(callback);\n  }\n  /**\n   * Updates an existing inbox notification with a new value, replacing the\n   * corresponding optimistic update.\n   *\n   * This will not update anything if the inbox notification ID isn't found in\n   * the cache.\n   */\n  updateInboxNotification(inboxNotificationId, optimisticUpdateId, callback) {\n    this._store.batch(() => {\n      this.removeOptimisticUpdate(optimisticUpdateId);\n      this.updateInboxNotificationsCache((cache) => {\n        const existing = cache[inboxNotificationId];\n        if (!existing) {\n          return cache;\n        }\n        const inboxNotifications = {\n          ...cache,\n          [inboxNotificationId]: callback(existing)\n        };\n        return inboxNotifications;\n      });\n    });\n  }\n  /**\n   * Updates *all* inbox notifications by running a mapper function over all of\n   * them, replacing the corresponding optimistic update.\n   */\n  updateAllInboxNotifications(optimisticUpdateId, mapFn) {\n    this._store.batch(() => {\n      this.removeOptimisticUpdate(optimisticUpdateId);\n      this.updateInboxNotificationsCache((cache) => _core.mapValues.call(void 0, cache, mapFn));\n    });\n  }\n  /**\n   * Deletes an existing inbox notification, replacing the corresponding\n   * optimistic update.\n   */\n  deleteInboxNotification(inboxNotificationId, optimisticUpdateId) {\n    this._store.batch(() => {\n      this.removeOptimisticUpdate(optimisticUpdateId);\n      this.updateInboxNotificationsCache((cache) => {\n        const { [inboxNotificationId]: removed, ...newCache } = cache;\n        return removed === void 0 ? cache : newCache;\n      });\n    });\n  }\n  /**\n   * Deletes *all* inbox notifications, replacing the corresponding optimistic\n   * update.\n   */\n  deleteAllInboxNotifications(optimisticUpdateId) {\n    this._store.batch(() => {\n      this.removeOptimisticUpdate(optimisticUpdateId);\n      this.updateInboxNotificationsCache(() => ({}));\n    });\n  }\n  /**\n   * Creates an new thread, replacing the corresponding optimistic update.\n   */\n  createThread(optimisticUpdateId, thread) {\n    this._store.batch(() => {\n      this.removeOptimisticUpdate(optimisticUpdateId);\n      this.mutateThreadsDB((db) => db.upsert(thread));\n    });\n  }\n  /**\n   * Updates an existing thread with a new value, replacing the corresponding\n   * optimistic update.\n   *\n   * This will not update anything if:\n   * - The thread ID isn't found in the cache; or\n   * - The thread ID was already deleted from the cache; or\n   * - The thread ID in the cache was updated more recently than the optimistic\n   *   update's timestamp (if given)\n   */\n  updateThread(threadId, optimisticUpdateId, callback, updatedAt) {\n    this._store.batch(() => {\n      if (optimisticUpdateId !== null) {\n        this.removeOptimisticUpdate(optimisticUpdateId);\n      }\n      this.mutateThreadsDB((db) => {\n        const existing = db.get(threadId);\n        if (!existing) return;\n        if (!!updatedAt && existing.updatedAt > updatedAt) return;\n        db.upsert(callback(existing));\n      });\n    });\n  }\n  patchThread(threadId, optimisticUpdateId, patch, updatedAt) {\n    return this.updateThread(\n      threadId,\n      optimisticUpdateId,\n      (thread) => ({ ...thread, ..._core.compactObject.call(void 0, patch) }),\n      updatedAt\n    );\n  }\n  addReaction(threadId, optimisticUpdateId, commentId, reaction, createdAt) {\n    this.updateThread(\n      threadId,\n      optimisticUpdateId,\n      (thread) => applyAddReaction(thread, commentId, reaction),\n      createdAt\n    );\n  }\n  removeReaction(threadId, optimisticUpdateId, commentId, emoji, userId, removedAt) {\n    this.updateThread(\n      threadId,\n      optimisticUpdateId,\n      (thread) => applyRemoveReaction(thread, commentId, emoji, userId, removedAt),\n      removedAt\n    );\n  }\n  /**\n   * Soft-deletes an existing thread by setting its `deletedAt` value,\n   * replacing the corresponding optimistic update.\n   *\n   * This will not update anything if:\n   * - The thread ID isn't found in the cache; or\n   * - The thread ID was already deleted from the cache\n   */\n  deleteThread(threadId, optimisticUpdateId) {\n    return this.updateThread(\n      threadId,\n      optimisticUpdateId,\n      // A deletion is actually an update of the deletedAt property internally\n      (thread) => ({ ...thread, updatedAt: /* @__PURE__ */ new Date(), deletedAt: /* @__PURE__ */ new Date() })\n    );\n  }\n  /**\n   * Creates an existing comment and ensures the associated notification is\n   * updated correctly, replacing the corresponding optimistic update.\n   */\n  createComment(newComment, optimisticUpdateId) {\n    this._store.batch(() => {\n      this.removeOptimisticUpdate(optimisticUpdateId);\n      const existingThread = this._rawThreadsDB.get(newComment.threadId);\n      if (!existingThread) {\n        return;\n      }\n      this.mutateThreadsDB(\n        (db) => db.upsert(applyUpsertComment(existingThread, newComment))\n      );\n      this.updateInboxNotificationsCache((cache) => {\n        const existingNotification = Object.values(cache).find(\n          (notification) => notification.kind === \"thread\" && notification.threadId === newComment.threadId\n        );\n        if (!existingNotification) {\n          return cache;\n        }\n        return {\n          ...cache,\n          [existingNotification.id]: {\n            ...existingNotification,\n            notifiedAt: newComment.createdAt,\n            readAt: newComment.createdAt\n          }\n        };\n      });\n    });\n  }\n  editComment(threadId, optimisticUpdateId, editedComment) {\n    return this.updateThread(\n      threadId,\n      optimisticUpdateId,\n      (thread) => applyUpsertComment(thread, editedComment)\n    );\n  }\n  deleteComment(threadId, optimisticUpdateId, commentId, deletedAt) {\n    return this.updateThread(\n      threadId,\n      optimisticUpdateId,\n      (thread) => applyDeleteComment(thread, commentId, deletedAt),\n      deletedAt\n    );\n  }\n  updateThreadAndNotification(thread, inboxNotification) {\n    this._store.batch(() => {\n      this.mutateThreadsDB((db) => db.upsertIfNewer(thread));\n      if (inboxNotification !== void 0) {\n        this.updateInboxNotificationsCache((cache) => ({\n          ...cache,\n          [inboxNotification.id]: inboxNotification\n        }));\n      }\n    });\n  }\n  updateThreadsAndNotifications(threads, inboxNotifications, deletedThreads = [], deletedInboxNotifications = []) {\n    this._store.batch(() => {\n      this.mutateThreadsDB(\n        (db) => applyThreadDeltaUpdates(db, { newThreads: threads, deletedThreads })\n      );\n      this.updateInboxNotificationsCache(\n        (cache) => applyNotificationsUpdates(cache, {\n          newInboxNotifications: inboxNotifications,\n          deletedNotifications: deletedInboxNotifications\n        })\n      );\n    });\n  }\n  /**\n   * Updates existing notification setting for a room with a new value,\n   * replacing the corresponding optimistic update.\n   */\n  updateRoomNotificationSettings_confirmOptimisticUpdate(roomId, optimisticUpdateId, settings) {\n    this._store.batch(() => {\n      this.removeOptimisticUpdate(optimisticUpdateId);\n      this.setNotificationSettings(roomId, settings);\n    });\n  }\n  addOptimisticUpdate(optimisticUpdate) {\n    const id = _core.nanoid.call(void 0, );\n    const newUpdate = { ...optimisticUpdate, id };\n    this.updateOptimisticUpdatesCache((cache) => [...cache, newUpdate]);\n    return id;\n  }\n  removeOptimisticUpdate(optimisticUpdateId) {\n    this.updateOptimisticUpdatesCache(\n      (cache) => cache.filter((ou) => ou.id !== optimisticUpdateId)\n    );\n  }\n  async fetchNotificationsDeltaUpdate(signal) {\n    const lastRequestedAt = this._notificationsLastRequestedAt;\n    if (lastRequestedAt === null) {\n      return;\n    }\n    const result = await this._client.getInboxNotificationsSince({\n      since: lastRequestedAt,\n      signal\n    });\n    if (lastRequestedAt < result.requestedAt) {\n      this._notificationsLastRequestedAt = result.requestedAt;\n    }\n    this.updateThreadsAndNotifications(\n      result.threads.updated,\n      result.inboxNotifications.updated,\n      result.threads.deleted,\n      result.inboxNotifications.deleted\n    );\n  }\n  waitUntilNotificationsLoaded() {\n    return this._notifications.waitUntilLoaded();\n  }\n  waitUntilRoomThreadsLoaded(roomId, query) {\n    const threadsFetcher = async (cursor) => {\n      const room = this._client.getRoom(roomId);\n      if (room === null) {\n        throw new (0, _core.HttpError)(`Room '${roomId}' is not available on client`, 479);\n      }\n      const result = await room.getThreads({ cursor, query });\n      this.updateThreadsAndNotifications(\n        result.threads,\n        result.inboxNotifications\n      );\n      const lastRequestedAt = this._roomThreadsLastRequestedAtByRoom.get(roomId);\n      if (lastRequestedAt === void 0 || lastRequestedAt > result.requestedAt) {\n        this._roomThreadsLastRequestedAtByRoom.set(roomId, result.requestedAt);\n      }\n      return result.nextCursor;\n    };\n    const queryKey = makeRoomThreadsQueryKey(roomId, query);\n    let paginatedResource = this._roomThreads.get(queryKey);\n    if (paginatedResource === void 0) {\n      paginatedResource = new PaginatedResource(threadsFetcher);\n    }\n    paginatedResource.observable.subscribe(\n      () => (\n        // Note that the store itself does not change, but it's only vehicle at\n        // the moment to trigger a re-render, so we'll do a no-op update here.\n        this._store.set((store) => ({ ...store }))\n      )\n    );\n    this._roomThreads.set(queryKey, paginatedResource);\n    return paginatedResource.waitUntilLoaded();\n  }\n  async fetchRoomThreadsDeltaUpdate(roomId, signal) {\n    const lastRequestedAt = this._roomThreadsLastRequestedAtByRoom.get(roomId);\n    if (lastRequestedAt === void 0) {\n      return;\n    }\n    const room = _core.nn.call(void 0, \n      this._client.getRoom(roomId),\n      `Room with id ${roomId} is not available on client`\n    );\n    const updates = await room.getThreadsSince({\n      since: lastRequestedAt,\n      signal\n    });\n    this.updateThreadsAndNotifications(\n      updates.threads.updated,\n      updates.inboxNotifications.updated,\n      updates.threads.deleted,\n      updates.inboxNotifications.deleted\n    );\n    if (lastRequestedAt < updates.requestedAt) {\n      this._roomThreadsLastRequestedAtByRoom.set(roomId, updates.requestedAt);\n    }\n  }\n  waitUntilUserThreadsLoaded(query) {\n    const queryKey = makeUserThreadsQueryKey(query);\n    const threadsFetcher = async (cursor) => {\n      const result = await this._client[_core.kInternal].getUserThreads_experimental({\n        cursor,\n        query\n      });\n      this.updateThreadsAndNotifications(\n        result.threads,\n        result.inboxNotifications\n      );\n      if (this._userThreadsLastRequestedAt === null) {\n        this._userThreadsLastRequestedAt = result.requestedAt;\n      }\n      return result.nextCursor;\n    };\n    let paginatedResource = this._userThreads.get(queryKey);\n    if (paginatedResource === void 0) {\n      paginatedResource = new PaginatedResource(threadsFetcher);\n    }\n    paginatedResource.observable.subscribe(\n      () => (\n        // Note that the store itself does not change, but it's only vehicle at\n        // the moment to trigger a re-render, so we'll do a no-op update here.\n        this._store.set((store) => ({ ...store }))\n      )\n    );\n    this._userThreads.set(queryKey, paginatedResource);\n    return paginatedResource.waitUntilLoaded();\n  }\n  async fetchUserThreadsDeltaUpdate(signal) {\n    const lastRequestedAt = this._userThreadsLastRequestedAt;\n    if (lastRequestedAt === null) {\n      return;\n    }\n    const result = await this._client[_core.kInternal].getUserThreadsSince_experimental({\n      since: lastRequestedAt,\n      signal\n    });\n    if (lastRequestedAt < result.requestedAt) {\n      this._notificationsLastRequestedAt = result.requestedAt;\n    }\n    this.updateThreadsAndNotifications(\n      result.threads.updated,\n      result.inboxNotifications.updated,\n      result.threads.deleted,\n      result.inboxNotifications.deleted\n    );\n  }\n  waitUntilRoomVersionsLoaded(roomId) {\n    const queryKey = makeVersionsQueryKey(roomId);\n    let resource = this._roomVersions.get(queryKey);\n    if (resource === void 0) {\n      const versionsFetcher = async () => {\n        const room = this._client.getRoom(roomId);\n        if (room === null) {\n          throw new (0, _core.HttpError)(\n            `Room '${roomId}' is not available on client`,\n            479\n          );\n        }\n        const result = await room[_core.kInternal].listTextVersions();\n        this.updateRoomVersions(roomId, result.versions);\n        const lastRequestedAt = this._roomVersionsLastRequestedAtByRoom.get(roomId);\n        if (lastRequestedAt === void 0 || lastRequestedAt > result.requestedAt) {\n          this._roomVersionsLastRequestedAtByRoom.set(\n            roomId,\n            result.requestedAt\n          );\n        }\n      };\n      resource = new SinglePageResource(versionsFetcher);\n    }\n    resource.observable.subscribe(\n      () => (\n        // Note that the store itself does not change, but it's only vehicle at\n        // the moment to trigger a re-render, so we'll do a no-op update here.\n        this._store.set((store) => ({ ...store }))\n      )\n    );\n    this._roomVersions.set(queryKey, resource);\n    return resource.waitUntilLoaded();\n  }\n  async fetchRoomVersionsDeltaUpdate(roomId, signal) {\n    const lastRequestedAt = this._roomVersionsLastRequestedAtByRoom.get(roomId);\n    if (lastRequestedAt === void 0) {\n      return;\n    }\n    const room = _core.nn.call(void 0, \n      this._client.getRoom(roomId),\n      `Room with id ${roomId} is not available on client`\n    );\n    const updates = await room[_core.kInternal].listTextVersionsSince({\n      since: lastRequestedAt,\n      signal\n    });\n    this.updateRoomVersions(roomId, updates.versions);\n    if (lastRequestedAt < updates.requestedAt) {\n      this._roomVersionsLastRequestedAtByRoom.set(roomId, updates.requestedAt);\n    }\n  }\n  waitUntilRoomNotificationSettingsLoaded(roomId) {\n    const queryKey = makeNotificationSettingsQueryKey(roomId);\n    let resource = this._roomNotificationSettings.get(queryKey);\n    if (resource === void 0) {\n      const notificationSettingsFetcher = async () => {\n        const room = this._client.getRoom(roomId);\n        if (room === null) {\n          throw new (0, _core.HttpError)(\n            `Room '${roomId}' is not available on client`,\n            479\n          );\n        }\n        const result = await room.getNotificationSettings();\n        this.setNotificationSettings(roomId, result);\n      };\n      resource = new SinglePageResource(notificationSettingsFetcher);\n    }\n    resource.observable.subscribe(\n      () => (\n        // Note that the store itself does not change, but it's only vehicle at\n        // the moment to trigger a re-render, so we'll do a no-op update here.\n        this._store.set((store) => ({ ...store }))\n      )\n    );\n    this._roomNotificationSettings.set(queryKey, resource);\n    return resource.waitUntilLoaded();\n  }\n  async refreshRoomNotificationSettings(roomId, signal) {\n    const room = _core.nn.call(void 0, \n      this._client.getRoom(roomId),\n      `Room with id ${roomId} is not available on client`\n    );\n    const result = await room.getNotificationSettings({ signal });\n    this.setNotificationSettings(roomId, result);\n  }\n};\nfunction internalToExternalState(state, rawThreadsDB) {\n  const threadsDB = rawThreadsDB.clone();\n  const computed = {\n    notificationsById: { ...state.notificationsById },\n    settingsByRoomId: { ...state.settingsByRoomId }\n  };\n  for (const optimisticUpdate of state.optimisticUpdates) {\n    switch (optimisticUpdate.type) {\n      case \"create-thread\": {\n        threadsDB.upsert(optimisticUpdate.thread);\n        break;\n      }\n      case \"edit-thread-metadata\": {\n        const thread = threadsDB.get(optimisticUpdate.threadId);\n        if (thread === void 0) break;\n        if (thread.updatedAt > optimisticUpdate.updatedAt) {\n          break;\n        }\n        threadsDB.upsert({\n          ...thread,\n          updatedAt: optimisticUpdate.updatedAt,\n          metadata: {\n            ...thread.metadata,\n            ...optimisticUpdate.metadata\n          }\n        });\n        break;\n      }\n      case \"mark-thread-as-resolved\": {\n        const thread = threadsDB.get(optimisticUpdate.threadId);\n        if (thread === void 0) break;\n        threadsDB.upsert({ ...thread, resolved: true });\n        break;\n      }\n      case \"mark-thread-as-unresolved\": {\n        const thread = threadsDB.get(optimisticUpdate.threadId);\n        if (thread === void 0) break;\n        threadsDB.upsert({ ...thread, resolved: false });\n        break;\n      }\n      case \"create-comment\": {\n        const thread = threadsDB.get(optimisticUpdate.comment.threadId);\n        if (thread === void 0) break;\n        threadsDB.upsert(applyUpsertComment(thread, optimisticUpdate.comment));\n        const inboxNotification = Object.values(\n          computed.notificationsById\n        ).find(\n          (notification) => notification.kind === \"thread\" && notification.threadId === thread.id\n        );\n        if (inboxNotification === void 0) {\n          break;\n        }\n        computed.notificationsById[inboxNotification.id] = {\n          ...inboxNotification,\n          notifiedAt: optimisticUpdate.comment.createdAt,\n          readAt: optimisticUpdate.comment.createdAt\n        };\n        break;\n      }\n      case \"edit-comment\": {\n        const thread = threadsDB.get(optimisticUpdate.comment.threadId);\n        if (thread === void 0) break;\n        threadsDB.upsert(applyUpsertComment(thread, optimisticUpdate.comment));\n        break;\n      }\n      case \"delete-comment\": {\n        const thread = threadsDB.get(optimisticUpdate.threadId);\n        if (thread === void 0) break;\n        threadsDB.upsert(\n          applyDeleteComment(\n            thread,\n            optimisticUpdate.commentId,\n            optimisticUpdate.deletedAt\n          )\n        );\n        break;\n      }\n      case \"delete-thread\": {\n        const thread = threadsDB.get(optimisticUpdate.threadId);\n        if (thread === void 0) break;\n        threadsDB.upsert({\n          ...thread,\n          deletedAt: optimisticUpdate.deletedAt,\n          updatedAt: optimisticUpdate.deletedAt,\n          comments: []\n        });\n        break;\n      }\n      case \"add-reaction\": {\n        const thread = threadsDB.get(optimisticUpdate.threadId);\n        if (thread === void 0) break;\n        threadsDB.upsert(\n          applyAddReaction(\n            thread,\n            optimisticUpdate.commentId,\n            optimisticUpdate.reaction\n          )\n        );\n        break;\n      }\n      case \"remove-reaction\": {\n        const thread = threadsDB.get(optimisticUpdate.threadId);\n        if (thread === void 0) break;\n        threadsDB.upsert(\n          applyRemoveReaction(\n            thread,\n            optimisticUpdate.commentId,\n            optimisticUpdate.emoji,\n            optimisticUpdate.userId,\n            optimisticUpdate.removedAt\n          )\n        );\n        break;\n      }\n      case \"mark-inbox-notification-as-read\": {\n        const ibn = computed.notificationsById[optimisticUpdate.inboxNotificationId];\n        if (ibn === void 0) {\n          break;\n        }\n        computed.notificationsById[optimisticUpdate.inboxNotificationId] = {\n          ...ibn,\n          readAt: optimisticUpdate.readAt\n        };\n        break;\n      }\n      case \"mark-all-inbox-notifications-as-read\": {\n        for (const id in computed.notificationsById) {\n          const ibn = computed.notificationsById[id];\n          if (ibn === void 0) {\n            break;\n          }\n          computed.notificationsById[id] = {\n            ...ibn,\n            readAt: optimisticUpdate.readAt\n          };\n        }\n        break;\n      }\n      case \"delete-inbox-notification\": {\n        delete computed.notificationsById[optimisticUpdate.inboxNotificationId];\n        break;\n      }\n      case \"delete-all-inbox-notifications\": {\n        computed.notificationsById = {};\n        break;\n      }\n      case \"update-notification-settings\": {\n        const settings = computed.settingsByRoomId[optimisticUpdate.roomId];\n        if (settings === void 0) {\n          break;\n        }\n        computed.settingsByRoomId[optimisticUpdate.roomId] = {\n          ...settings,\n          ...optimisticUpdate.settings\n        };\n      }\n    }\n  }\n  const cleanedNotifications = (\n    // Sort so that the most recent notifications are first\n    Object.values(computed.notificationsById).filter(\n      (ibn) => ibn.kind === \"thread\" ? threadsDB.get(ibn.threadId) !== void 0 : true\n    ).sort((a, b) => b.notifiedAt.getTime() - a.notifiedAt.getTime())\n  );\n  return {\n    cleanedNotifications,\n    notificationsById: computed.notificationsById,\n    settingsByRoomId: computed.settingsByRoomId,\n    threadsDB,\n    versionsByRoomId: state.versionsByRoomId\n  };\n}\nfunction applyThreadDeltaUpdates(db, updates) {\n  updates.newThreads.forEach((thread) => db.upsertIfNewer(thread));\n  updates.deletedThreads.forEach(({ id, deletedAt }) => {\n    const existing = db.getEvenIfDeleted(id);\n    if (!existing) return;\n    db.delete(id, deletedAt);\n  });\n}\nfunction applyNotificationsUpdates(existingInboxNotifications, updates) {\n  const updatedInboxNotifications = { ...existingInboxNotifications };\n  updates.newInboxNotifications.forEach((notification) => {\n    const existingNotification = updatedInboxNotifications[notification.id];\n    if (existingNotification) {\n      const result = compareInboxNotifications(\n        existingNotification,\n        notification\n      );\n      if (result === 1) return;\n    }\n    updatedInboxNotifications[notification.id] = notification;\n  });\n  updates.deletedNotifications.forEach(\n    ({ id }) => delete updatedInboxNotifications[id]\n  );\n  return updatedInboxNotifications;\n}\nfunction compareInboxNotifications(inboxNotificationA, inboxNotificationB) {\n  if (inboxNotificationA.notifiedAt > inboxNotificationB.notifiedAt) {\n    return 1;\n  } else if (inboxNotificationA.notifiedAt < inboxNotificationB.notifiedAt) {\n    return -1;\n  }\n  if (inboxNotificationA.readAt && inboxNotificationB.readAt) {\n    return inboxNotificationA.readAt > inboxNotificationB.readAt ? 1 : inboxNotificationA.readAt < inboxNotificationB.readAt ? -1 : 0;\n  } else if (inboxNotificationA.readAt || inboxNotificationB.readAt) {\n    return inboxNotificationA.readAt ? 1 : -1;\n  }\n  return 0;\n}\nfunction applyUpsertComment(thread, comment) {\n  if (thread.deletedAt !== void 0) {\n    return thread;\n  }\n  if (comment.threadId !== thread.id) {\n    _core.console.warn(\n      `Comment ${comment.id} does not belong to thread ${thread.id}`\n    );\n    return thread;\n  }\n  const existingComment = thread.comments.find(\n    (existingComment2) => existingComment2.id === comment.id\n  );\n  if (existingComment === void 0) {\n    const updatedAt = new Date(\n      Math.max(thread.updatedAt.getTime(), comment.createdAt.getTime())\n    );\n    const updatedThread = {\n      ...thread,\n      updatedAt,\n      comments: [...thread.comments, comment]\n    };\n    return updatedThread;\n  }\n  if (existingComment.deletedAt !== void 0) {\n    return thread;\n  }\n  if (existingComment.editedAt === void 0 || comment.editedAt === void 0 || existingComment.editedAt <= comment.editedAt) {\n    const updatedComments = thread.comments.map(\n      (existingComment2) => existingComment2.id === comment.id ? comment : existingComment2\n    );\n    const updatedThread = {\n      ...thread,\n      updatedAt: new Date(\n        Math.max(\n          thread.updatedAt.getTime(),\n          _optionalChain([comment, 'access', _5 => _5.editedAt, 'optionalAccess', _6 => _6.getTime, 'call', _7 => _7()]) || comment.createdAt.getTime()\n        )\n      ),\n      comments: updatedComments\n    };\n    return updatedThread;\n  }\n  return thread;\n}\nfunction applyDeleteComment(thread, commentId, deletedAt) {\n  if (thread.deletedAt !== void 0) {\n    return thread;\n  }\n  const existingComment = thread.comments.find(\n    (comment) => comment.id === commentId\n  );\n  if (existingComment === void 0) {\n    return thread;\n  }\n  if (existingComment.deletedAt !== void 0) {\n    return thread;\n  }\n  const updatedComments = thread.comments.map(\n    (comment) => comment.id === commentId ? {\n      ...comment,\n      deletedAt,\n      // We optimistically remove the comment body and attachments when marking it as deleted\n      body: void 0,\n      attachments: []\n    } : comment\n  );\n  if (updatedComments.every((comment) => comment.deletedAt !== void 0)) {\n    return {\n      ...thread,\n      deletedAt,\n      updatedAt: deletedAt\n    };\n  }\n  return {\n    ...thread,\n    updatedAt: deletedAt,\n    comments: updatedComments\n  };\n}\nfunction applyAddReaction(thread, commentId, reaction) {\n  if (thread.deletedAt !== void 0) {\n    return thread;\n  }\n  const existingComment = thread.comments.find(\n    (comment) => comment.id === commentId\n  );\n  if (existingComment === void 0) {\n    return thread;\n  }\n  if (existingComment.deletedAt !== void 0) {\n    return thread;\n  }\n  const updatedComments = thread.comments.map(\n    (comment) => comment.id === commentId ? {\n      ...comment,\n      reactions: upsertReaction(comment.reactions, reaction)\n    } : comment\n  );\n  return {\n    ...thread,\n    updatedAt: new Date(\n      Math.max(reaction.createdAt.getTime(), thread.updatedAt.getTime())\n    ),\n    comments: updatedComments\n  };\n}\nfunction applyRemoveReaction(thread, commentId, emoji, userId, removedAt) {\n  if (thread.deletedAt !== void 0) {\n    return thread;\n  }\n  const existingComment = thread.comments.find(\n    (comment) => comment.id === commentId\n  );\n  if (existingComment === void 0) {\n    return thread;\n  }\n  if (existingComment.deletedAt !== void 0) {\n    return thread;\n  }\n  const updatedComments = thread.comments.map(\n    (comment) => comment.id === commentId ? {\n      ...comment,\n      reactions: comment.reactions.map(\n        (reaction) => reaction.emoji === emoji ? {\n          ...reaction,\n          users: reaction.users.filter((user) => user.id !== userId)\n        } : reaction\n      ).filter((reaction) => reaction.users.length > 0)\n      // Remove reactions with no users left\n    } : comment\n  );\n  return {\n    ...thread,\n    updatedAt: new Date(\n      Math.max(removedAt.getTime(), thread.updatedAt.getTime())\n    ),\n    comments: updatedComments\n  };\n}\nfunction upsertReaction(reactions, reaction) {\n  const existingReaction = reactions.find(\n    (existingReaction2) => existingReaction2.emoji === reaction.emoji\n  );\n  if (existingReaction === void 0) {\n    return [\n      ...reactions,\n      {\n        emoji: reaction.emoji,\n        createdAt: reaction.createdAt,\n        users: [{ id: reaction.userId }]\n      }\n    ];\n  }\n  if (existingReaction.users.some((user) => user.id === reaction.userId) === false) {\n    return reactions.map(\n      (existingReaction2) => existingReaction2.emoji === reaction.emoji ? {\n        ...existingReaction2,\n        users: [...existingReaction2.users, { id: reaction.userId }]\n      } : existingReaction2\n    );\n  }\n  return reactions;\n}\n\n// src/liveblocks.tsx\nvar ClientContext = _react.createContext.call(void 0, null);\nfunction missingUserError(userId) {\n  return new Error(`resolveUsers didn't return anything for user '${userId}'`);\n}\nfunction missingRoomInfoError(roomId) {\n  return new Error(\n    `resolveRoomsInfo didn't return anything for room '${roomId}'`\n  );\n}\nfunction identity(x) {\n  return x;\n}\nvar _umbrellaStores = /* @__PURE__ */ new WeakMap();\nvar _extras = /* @__PURE__ */ new WeakMap();\nvar _bundles = /* @__PURE__ */ new WeakMap();\nfunction selectUnreadInboxNotificationsCount(inboxNotifications) {\n  let count = 0;\n  for (const notification of inboxNotifications) {\n    if (notification.readAt === null || notification.readAt < notification.notifiedAt) {\n      count++;\n    }\n  }\n  return count;\n}\nfunction selectorFor_useUnreadInboxNotificationsCount(result) {\n  if (!result.inboxNotifications) {\n    return result;\n  }\n  return {\n    isLoading: false,\n    count: selectUnreadInboxNotificationsCount(result.inboxNotifications)\n  };\n}\nfunction selectorFor_useUser(state, userId) {\n  if (state === void 0 || _optionalChain([state, 'optionalAccess', _8 => _8.isLoading])) {\n    return _nullishCoalesce(state, () => ( { isLoading: true }));\n  }\n  if (state.error) {\n    return state;\n  }\n  if (!state.data) {\n    return {\n      isLoading: false,\n      error: missingUserError(userId)\n    };\n  }\n  return {\n    isLoading: false,\n    user: state.data\n  };\n}\nfunction selectorFor_useRoomInfo(state, roomId) {\n  if (state === void 0 || _optionalChain([state, 'optionalAccess', _9 => _9.isLoading])) {\n    return _nullishCoalesce(state, () => ( { isLoading: true }));\n  }\n  if (state.error) {\n    return state;\n  }\n  if (!state.data) {\n    return {\n      isLoading: false,\n      error: missingRoomInfoError(roomId)\n    };\n  }\n  return {\n    isLoading: false,\n    info: state.data\n  };\n}\nfunction getOrCreateContextBundle(client) {\n  let bundle = _bundles.get(client);\n  if (!bundle) {\n    bundle = makeLiveblocksContextBundle(client);\n    _bundles.set(client, bundle);\n  }\n  return bundle;\n}\nfunction getUmbrellaStoreForClient(client) {\n  let store = _umbrellaStores.get(client);\n  if (!store) {\n    store = new UmbrellaStore(client);\n    _umbrellaStores.set(client, store);\n  }\n  return store;\n}\nfunction getLiveblocksExtrasForClient(client) {\n  let extras = _extras.get(client);\n  if (!extras) {\n    extras = makeLiveblocksExtrasForClient(client);\n    _extras.set(client, extras);\n  }\n  return extras;\n}\nfunction makeLiveblocksExtrasForClient(client) {\n  const store = getUmbrellaStoreForClient(client);\n  const notificationsPoller = _core.makePoller.call(void 0, \n    async (signal) => {\n      try {\n        return await store.fetchNotificationsDeltaUpdate(signal);\n      } catch (err) {\n        console.warn(`Polling new inbox notifications failed: ${String(err)}`);\n        throw err;\n      }\n    },\n    config.NOTIFICATIONS_POLL_INTERVAL,\n    { maxStaleTimeMs: config.NOTIFICATIONS_MAX_STALE_TIME }\n  );\n  const userThreadsPoller = _core.makePoller.call(void 0, \n    async (signal) => {\n      try {\n        return await store.fetchUserThreadsDeltaUpdate(signal);\n      } catch (err) {\n        console.warn(`Polling new user threads failed: ${String(err)}`);\n        throw err;\n      }\n    },\n    config.USER_THREADS_POLL_INTERVAL,\n    { maxStaleTimeMs: config.USER_THREADS_MAX_STALE_TIME }\n  );\n  return {\n    store,\n    notificationsPoller,\n    userThreadsPoller\n  };\n}\nfunction makeLiveblocksContextBundle(client) {\n  const useInboxNotificationThread2 = (inboxNotificationId) => useInboxNotificationThread_withClient(client, inboxNotificationId);\n  const useMarkInboxNotificationAsRead2 = () => useMarkInboxNotificationAsRead_withClient(client);\n  const useMarkAllInboxNotificationsAsRead2 = () => useMarkAllInboxNotificationsAsRead_withClient(client);\n  const useDeleteInboxNotification2 = () => useDeleteInboxNotification_withClient(client);\n  const useDeleteAllInboxNotifications2 = () => useDeleteAllInboxNotifications_withClient(client);\n  function LiveblocksProvider2(props) {\n    useEnsureNoLiveblocksProvider();\n    return /* @__PURE__ */ React.default.createElement(ClientContext.Provider, { value: client }, props.children);\n  }\n  const shared = createSharedContext(client);\n  const bundle = {\n    LiveblocksProvider: LiveblocksProvider2,\n    useInboxNotifications: () => useInboxNotifications_withClient(client, identity, _core.shallow),\n    useUnreadInboxNotificationsCount: () => useUnreadInboxNotificationsCount_withClient(client),\n    useMarkInboxNotificationAsRead: useMarkInboxNotificationAsRead2,\n    useMarkAllInboxNotificationsAsRead: useMarkAllInboxNotificationsAsRead2,\n    useDeleteInboxNotification: useDeleteInboxNotification2,\n    useDeleteAllInboxNotifications: useDeleteAllInboxNotifications2,\n    useInboxNotificationThread: useInboxNotificationThread2,\n    useUserThreads_experimental,\n    ...shared.classic,\n    suspense: {\n      LiveblocksProvider: LiveblocksProvider2,\n      useInboxNotifications: () => useInboxNotificationsSuspense_withClient(client),\n      useUnreadInboxNotificationsCount: () => useUnreadInboxNotificationsCountSuspense_withClient(client),\n      useMarkInboxNotificationAsRead: useMarkInboxNotificationAsRead2,\n      useMarkAllInboxNotificationsAsRead: useMarkAllInboxNotificationsAsRead2,\n      useDeleteInboxNotification: useDeleteInboxNotification2,\n      useDeleteAllInboxNotifications: useDeleteAllInboxNotifications2,\n      useInboxNotificationThread: useInboxNotificationThread2,\n      useUserThreads_experimental: useUserThreadsSuspense_experimental,\n      ...shared.suspense\n    }\n  };\n  return bundle;\n}\nfunction useInboxNotifications_withClient(client, selector, isEqual) {\n  const { store, notificationsPoller: poller } = getLiveblocksExtrasForClient(client);\n  _react.useEffect.call(void 0, () => {\n    void store.waitUntilNotificationsLoaded();\n  });\n  _react.useEffect.call(void 0, () => {\n    poller.inc();\n    poller.pollNowIfStale();\n    return () => {\n      poller.dec();\n    };\n  }, [poller]);\n  return _withselectorjs.useSyncExternalStoreWithSelector.call(void 0, \n    store.subscribe,\n    store.getInboxNotificationsLoadingState,\n    store.getInboxNotificationsLoadingState,\n    selector,\n    isEqual\n  );\n}\nfunction useInboxNotificationsSuspense_withClient(client) {\n  const store = getLiveblocksExtrasForClient(client).store;\n  use(store.waitUntilNotificationsLoaded());\n  const result = useInboxNotifications_withClient(client, identity, _core.shallow);\n  _core.assert.call(void 0, !result.error, \"Did not expect error\");\n  _core.assert.call(void 0, !result.isLoading, \"Did not expect loading\");\n  return result;\n}\nfunction useUnreadInboxNotificationsCount_withClient(client) {\n  return useInboxNotifications_withClient(\n    client,\n    selectorFor_useUnreadInboxNotificationsCount,\n    _core.shallow\n  );\n}\nfunction useUnreadInboxNotificationsCountSuspense_withClient(client) {\n  const store = getLiveblocksExtrasForClient(client).store;\n  use(store.waitUntilNotificationsLoaded());\n  const result = useUnreadInboxNotificationsCount_withClient(client);\n  _core.assert.call(void 0, !result.isLoading, \"Did not expect loading\");\n  _core.assert.call(void 0, !result.error, \"Did not expect error\");\n  return result;\n}\nfunction useMarkInboxNotificationAsRead_withClient(client) {\n  return _react.useCallback.call(void 0, \n    (inboxNotificationId) => {\n      const { store } = getLiveblocksExtrasForClient(client);\n      const readAt = /* @__PURE__ */ new Date();\n      const optimisticUpdateId = store.addOptimisticUpdate({\n        type: \"mark-inbox-notification-as-read\",\n        inboxNotificationId,\n        readAt\n      });\n      client.markInboxNotificationAsRead(inboxNotificationId).then(\n        () => {\n          store.updateInboxNotification(\n            inboxNotificationId,\n            optimisticUpdateId,\n            (inboxNotification) => ({ ...inboxNotification, readAt })\n          );\n        },\n        () => {\n          store.removeOptimisticUpdate(optimisticUpdateId);\n        }\n      );\n    },\n    [client]\n  );\n}\nfunction useMarkAllInboxNotificationsAsRead_withClient(client) {\n  return _react.useCallback.call(void 0, () => {\n    const { store } = getLiveblocksExtrasForClient(client);\n    const readAt = /* @__PURE__ */ new Date();\n    const optimisticUpdateId = store.addOptimisticUpdate({\n      type: \"mark-all-inbox-notifications-as-read\",\n      readAt\n    });\n    client.markAllInboxNotificationsAsRead().then(\n      () => {\n        store.updateAllInboxNotifications(\n          optimisticUpdateId,\n          (inboxNotification) => ({ ...inboxNotification, readAt })\n        );\n      },\n      () => {\n        store.removeOptimisticUpdate(optimisticUpdateId);\n      }\n    );\n  }, [client]);\n}\nfunction useDeleteInboxNotification_withClient(client) {\n  return _react.useCallback.call(void 0, \n    (inboxNotificationId) => {\n      const { store } = getLiveblocksExtrasForClient(client);\n      const deletedAt = /* @__PURE__ */ new Date();\n      const optimisticUpdateId = store.addOptimisticUpdate({\n        type: \"delete-inbox-notification\",\n        inboxNotificationId,\n        deletedAt\n      });\n      client.deleteInboxNotification(inboxNotificationId).then(\n        () => {\n          store.deleteInboxNotification(\n            inboxNotificationId,\n            optimisticUpdateId\n          );\n        },\n        () => {\n          store.removeOptimisticUpdate(optimisticUpdateId);\n        }\n      );\n    },\n    [client]\n  );\n}\nfunction useDeleteAllInboxNotifications_withClient(client) {\n  return _react.useCallback.call(void 0, () => {\n    const { store } = getLiveblocksExtrasForClient(client);\n    const deletedAt = /* @__PURE__ */ new Date();\n    const optimisticUpdateId = store.addOptimisticUpdate({\n      type: \"delete-all-inbox-notifications\",\n      deletedAt\n    });\n    client.deleteAllInboxNotifications().then(\n      () => {\n        store.deleteAllInboxNotifications(optimisticUpdateId);\n      },\n      () => {\n        store.removeOptimisticUpdate(optimisticUpdateId);\n      }\n    );\n  }, [client]);\n}\nfunction useInboxNotificationThread_withClient(client, inboxNotificationId) {\n  const { store } = getLiveblocksExtrasForClient(client);\n  const getter = store.getFullState;\n  const selector = _react.useCallback.call(void 0, \n    (state) => {\n      const inboxNotification = _nullishCoalesce(state.notificationsById[inboxNotificationId], () => ( _core.raise.call(void 0, `Inbox notification with ID \"${inboxNotificationId}\" not found`)));\n      if (inboxNotification.kind !== \"thread\") {\n        _core.raise.call(void 0, \n          `Inbox notification with ID \"${inboxNotificationId}\" is not of kind \"thread\"`\n        );\n      }\n      const thread = _nullishCoalesce(state.threadsDB.get(inboxNotification.threadId), () => ( _core.raise.call(void 0, \n        `Thread with ID \"${inboxNotification.threadId}\" not found, this inbox notification might not be of kind \"thread\"`\n      )));\n      return thread;\n    },\n    [inboxNotificationId]\n  );\n  return _withselectorjs.useSyncExternalStoreWithSelector.call(void 0, \n    store.subscribe,\n    // Re-evaluate if we need to update any time the notification changes over time\n    getter,\n    getter,\n    selector\n  );\n}\nfunction useUser_withClient(client, userId) {\n  const usersStore = client[_core.kInternal].usersStore;\n  const getUserState = _react.useCallback.call(void 0, \n    () => usersStore.getState(userId),\n    [usersStore, userId]\n  );\n  const selector = _react.useCallback.call(void 0, \n    (state) => selectorFor_useUser(state, userId),\n    [userId]\n  );\n  const result = _withselectorjs.useSyncExternalStoreWithSelector.call(void 0, \n    usersStore.subscribe,\n    getUserState,\n    getUserState,\n    selector,\n    _core.shallow\n  );\n  _react.useEffect.call(void 0, () => {\n    void usersStore.get(userId);\n  }, [usersStore, userId, result]);\n  return result;\n}\nfunction useUserSuspense_withClient(client, userId) {\n  const usersStore = client[_core.kInternal].usersStore;\n  const getUserState = _react.useCallback.call(void 0, \n    () => usersStore.getState(userId),\n    [usersStore, userId]\n  );\n  const userState = getUserState();\n  if (!userState || userState.isLoading) {\n    throw usersStore.get(userId);\n  }\n  if (userState.error) {\n    throw userState.error;\n  }\n  if (!userState.data) {\n    throw missingUserError(userId);\n  }\n  const state = _indexjs.useSyncExternalStore.call(void 0, \n    usersStore.subscribe,\n    getUserState,\n    getUserState\n  );\n  _core.assert.call(void 0, state !== void 0, \"Unexpected missing state\");\n  _core.assert.call(void 0, !state.isLoading, \"Unexpected loading state\");\n  _core.assert.call(void 0, !state.error, \"Unexpected error state\");\n  return {\n    isLoading: false,\n    user: state.data,\n    error: void 0\n  };\n}\nfunction useRoomInfo_withClient(client, roomId) {\n  const roomsInfoStore = client[_core.kInternal].roomsInfoStore;\n  const getRoomInfoState = _react.useCallback.call(void 0, \n    () => roomsInfoStore.getState(roomId),\n    [roomsInfoStore, roomId]\n  );\n  const selector = _react.useCallback.call(void 0, \n    (state) => selectorFor_useRoomInfo(state, roomId),\n    [roomId]\n  );\n  const result = _withselectorjs.useSyncExternalStoreWithSelector.call(void 0, \n    roomsInfoStore.subscribe,\n    getRoomInfoState,\n    getRoomInfoState,\n    selector,\n    _core.shallow\n  );\n  _react.useEffect.call(void 0, () => {\n    void roomsInfoStore.get(roomId);\n  }, [roomsInfoStore, roomId, result]);\n  return result;\n}\nfunction useRoomInfoSuspense_withClient(client, roomId) {\n  const roomsInfoStore = client[_core.kInternal].roomsInfoStore;\n  const getRoomInfoState = _react.useCallback.call(void 0, \n    () => roomsInfoStore.getState(roomId),\n    [roomsInfoStore, roomId]\n  );\n  const roomInfoState = getRoomInfoState();\n  if (!roomInfoState || roomInfoState.isLoading) {\n    throw roomsInfoStore.get(roomId);\n  }\n  if (roomInfoState.error) {\n    throw roomInfoState.error;\n  }\n  if (!roomInfoState.data) {\n    throw missingRoomInfoError(roomId);\n  }\n  const state = _indexjs.useSyncExternalStore.call(void 0, \n    roomsInfoStore.subscribe,\n    getRoomInfoState,\n    getRoomInfoState\n  );\n  _core.assert.call(void 0, state !== void 0, \"Unexpected missing state\");\n  _core.assert.call(void 0, !state.isLoading, \"Unexpected loading state\");\n  _core.assert.call(void 0, !state.error, \"Unexpected error state\");\n  _core.assert.call(void 0, state.data !== void 0, \"Unexpected missing room info data\");\n  return {\n    isLoading: false,\n    info: state.data,\n    error: void 0\n  };\n}\nfunction createSharedContext(client) {\n  const useClient2 = () => client;\n  return {\n    classic: {\n      useClient: useClient2,\n      useUser: (userId) => useUser_withClient(client, userId),\n      useRoomInfo: (roomId) => useRoomInfo_withClient(client, roomId),\n      useIsInsideRoom\n    },\n    suspense: {\n      useClient: useClient2,\n      useUser: (userId) => useUserSuspense_withClient(client, userId),\n      useRoomInfo: (roomId) => useRoomInfoSuspense_withClient(client, roomId),\n      useIsInsideRoom\n    }\n  };\n}\nfunction useEnsureNoLiveblocksProvider(options) {\n  const existing = useClientOrNull();\n  if (!_optionalChain([options, 'optionalAccess', _10 => _10.allowNesting]) && existing !== null) {\n    throw new Error(\n      \"You cannot nest multiple LiveblocksProvider instances in the same React tree.\"\n    );\n  }\n}\nfunction useClientOrNull() {\n  return _react.useContext.call(void 0, ClientContext);\n}\nfunction useClient() {\n  return _nullishCoalesce(useClientOrNull(), () => ( _core.raise.call(void 0, \"LiveblocksProvider is missing from the React tree.\")));\n}\nfunction LiveblocksProviderWithClient(props) {\n  useEnsureNoLiveblocksProvider(props);\n  return /* @__PURE__ */ React.default.createElement(ClientContext.Provider, { value: props.client }, props.children);\n}\nfunction LiveblocksProvider(props) {\n  const { children, ...o } = props;\n  const options = {\n    publicApiKey: useInitial(o.publicApiKey),\n    throttle: useInitial(o.throttle),\n    lostConnectionTimeout: useInitial(o.lostConnectionTimeout),\n    backgroundKeepAliveTimeout: useInitial(o.backgroundKeepAliveTimeout),\n    polyfills: useInitial(o.polyfills),\n    unstable_fallbackToHTTP: useInitial(o.unstable_fallbackToHTTP),\n    unstable_streamData: useInitial(o.unstable_streamData),\n    authEndpoint: useInitialUnlessFunction(o.authEndpoint),\n    resolveMentionSuggestions: useInitialUnlessFunction(\n      o.resolveMentionSuggestions\n    ),\n    resolveUsers: useInitialUnlessFunction(o.resolveUsers),\n    resolveRoomsInfo: useInitialUnlessFunction(o.resolveRoomsInfo),\n    baseUrl: useInitial(\n      // @ts-expect-error - Hidden config options\n      o.baseUrl\n    ),\n    enableDebugLogging: useInitial(\n      // @ts-expect-error - Hidden config options\n      o.enableDebugLogging\n    )\n  };\n  const client = _react.useMemo.call(void 0, () => _core.createClient.call(void 0, options), []);\n  return /* @__PURE__ */ React.default.createElement(LiveblocksProviderWithClient, { client }, children);\n}\nfunction createLiveblocksContext(client) {\n  return getOrCreateContextBundle(client);\n}\nfunction useUserThreads_experimental(options = {\n  query: {\n    metadata: {}\n  }\n}) {\n  const client = useClient();\n  const { store, userThreadsPoller: poller } = getLiveblocksExtrasForClient(client);\n  _react.useEffect.call(void 0, \n    () => {\n      void store.waitUntilUserThreadsLoaded(options.query);\n    }\n    // NOTE: Deliberately *not* using a dependency array here!\n    //\n    // It is important to call waitUntil on *every* render.\n    // This is harmless though, on most renders, except:\n    // 1. The very first render, in which case we'll want to trigger the initial page fetch.\n    // 2. All other subsequent renders now \"just\" return the same promise (a quick operation).\n    // 3. If ever the promise would fail, then after 5 seconds it would reset, and on the very\n    //    *next* render after that, a *new* fetch/promise will get created.\n  );\n  _react.useEffect.call(void 0, () => {\n    poller.inc();\n    poller.pollNowIfStale();\n    return () => {\n      poller.dec();\n    };\n  }, [poller]);\n  const getter = _react.useCallback.call(void 0, \n    () => store.getUserThreadsLoadingState(options.query),\n    [store, options.query]\n  );\n  return _withselectorjs.useSyncExternalStoreWithSelector.call(void 0, \n    store.subscribe,\n    getter,\n    getter,\n    identity,\n    shallow2\n    // NOTE: Using 2-level-deep shallow check here, because the result of selectThreads() is not stable!\n  );\n}\nfunction useUserThreadsSuspense_experimental(options = {\n  query: {\n    metadata: {}\n  }\n}) {\n  const client = useClient();\n  const { store } = getLiveblocksExtrasForClient(client);\n  use(store.waitUntilUserThreadsLoaded(options.query));\n  const result = useUserThreads_experimental(options);\n  _core.assert.call(void 0, !result.error, \"Did not expect error\");\n  _core.assert.call(void 0, !result.isLoading, \"Did not expect loading\");\n  return result;\n}\nfunction useInboxNotifications() {\n  return useInboxNotifications_withClient(useClient(), identity, _core.shallow);\n}\nfunction useInboxNotificationsSuspense() {\n  return useInboxNotificationsSuspense_withClient(useClient());\n}\nfunction useInboxNotificationThread(inboxNotificationId) {\n  return useInboxNotificationThread_withClient(\n    useClient(),\n    inboxNotificationId\n  );\n}\nfunction useMarkAllInboxNotificationsAsRead() {\n  return useMarkAllInboxNotificationsAsRead_withClient(useClient());\n}\nfunction useMarkInboxNotificationAsRead() {\n  return useMarkInboxNotificationAsRead_withClient(useClient());\n}\nfunction useDeleteAllInboxNotifications() {\n  return useDeleteAllInboxNotifications_withClient(useClient());\n}\nfunction useDeleteInboxNotification() {\n  return useDeleteInboxNotification_withClient(useClient());\n}\nfunction useUnreadInboxNotificationsCount() {\n  return useUnreadInboxNotificationsCount_withClient(useClient());\n}\nfunction useUnreadInboxNotificationsCountSuspense() {\n  return useUnreadInboxNotificationsCountSuspense_withClient(useClient());\n}\nfunction useUser(userId) {\n  const client = useClient();\n  return useUser_withClient(client, userId);\n}\nfunction useUserSuspense(userId) {\n  const client = useClient();\n  return useUserSuspense_withClient(client, userId);\n}\nfunction useRoomInfo(roomId) {\n  return useRoomInfo_withClient(useClient(), roomId);\n}\nfunction useRoomInfoSuspense(roomId) {\n  return useRoomInfoSuspense_withClient(useClient(), roomId);\n}\nvar _useInboxNotificationThread = useInboxNotificationThread;\nvar _useUser = useUser;\nvar _useUserSuspense = useUserSuspense;\nvar _useUserThreads_experimental = useUserThreads_experimental;\nvar _useUserThreadsSuspense_experimental = useUserThreadsSuspense_experimental;\n\n// src/types/errors.ts\nvar CreateThreadError = class extends Error {\n  constructor(cause, context) {\n    super(\"Create thread failed.\");\n    this.cause = cause;\n    this.context = context;\n    this.name = \"CreateThreadError\";\n  }\n};\nvar DeleteThreadError = class extends Error {\n  constructor(cause, context) {\n    super(\"Delete thread failed.\");\n    this.cause = cause;\n    this.context = context;\n    this.name = \"DeleteThreadError\";\n  }\n};\nvar EditThreadMetadataError = class extends Error {\n  constructor(cause, context) {\n    super(\"Edit thread metadata failed.\");\n    this.cause = cause;\n    this.context = context;\n    this.name = \"EditThreadMetadataError\";\n  }\n};\nvar MarkThreadAsResolvedError = class extends Error {\n  constructor(cause, context) {\n    super(\"Mark thread as resolved failed.\");\n    this.cause = cause;\n    this.context = context;\n    this.name = \"MarkThreadAsResolvedError\";\n  }\n};\nvar MarkThreadAsUnresolvedError = class extends Error {\n  constructor(cause, context) {\n    super(\"Mark thread as unresolved failed.\");\n    this.cause = cause;\n    this.context = context;\n    this.name = \"MarkThreadAsUnresolvedError\";\n  }\n};\nvar CreateCommentError = class extends Error {\n  constructor(cause, context) {\n    super(\"Create comment failed.\");\n    this.cause = cause;\n    this.context = context;\n    this.name = \"CreateCommentError\";\n  }\n};\nvar EditCommentError = class extends Error {\n  constructor(cause, context) {\n    super(\"Edit comment failed.\");\n    this.cause = cause;\n    this.context = context;\n    this.name = \"EditCommentError\";\n  }\n};\nvar DeleteCommentError = class extends Error {\n  constructor(cause, context) {\n    super(\"Delete comment failed.\");\n    this.cause = cause;\n    this.context = context;\n    this.name = \"DeleteCommentError\";\n  }\n};\nvar AddReactionError = class extends Error {\n  constructor(cause, context) {\n    super(\"Add reaction failed.\");\n    this.cause = cause;\n    this.context = context;\n    this.name = \"AddReactionError\";\n  }\n};\nvar RemoveReactionError = class extends Error {\n  constructor(cause, context) {\n    super(\"Remove reaction failed.\");\n    this.cause = cause;\n    this.context = context;\n    this.name = \"RemoveReactionError\";\n  }\n};\nvar MarkInboxNotificationAsReadError = class extends Error {\n  constructor(cause, context) {\n    super(\"Mark inbox notification as read failed.\");\n    this.cause = cause;\n    this.context = context;\n    this.name = \"MarkInboxNotificationAsReadError\";\n  }\n};\nvar UpdateNotificationSettingsError = class extends Error {\n  constructor(cause, context) {\n    super(\"Update notification settings failed.\");\n    this.cause = cause;\n    this.context = context;\n    this.name = \"UpdateNotificationSettingsError\";\n  }\n};\n\n// src/room.tsx\nvar _client2 = require('@liveblocks/client');\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// src/use-scroll-to-comment-on-load-effect.ts\n\nfunction handleScrollToCommentOnLoad(shouldScrollOnLoad, state) {\n  if (shouldScrollOnLoad === false) return;\n  if (!state.threads) return;\n  const isWindowDefined = typeof window !== \"undefined\";\n  if (!isWindowDefined) return;\n  const hash = window.location.hash;\n  const commentId = hash.slice(1);\n  if (!commentId.startsWith(\"cm_\")) return;\n  const comment = document.getElementById(commentId);\n  if (comment === null) return;\n  const comments = state.threads.flatMap((thread) => thread.comments);\n  const isCommentInThreads = comments.some(\n    (comment2) => comment2.id === commentId\n  );\n  if (!isCommentInThreads) return;\n  comment.scrollIntoView();\n}\nfunction useScrollToCommentOnLoadEffect(shouldScrollOnLoad, state) {\n  React3.useEffect(\n    () => {\n      handleScrollToCommentOnLoad(shouldScrollOnLoad, state);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- We only want to run this effect once\n    [state.isLoading]\n  );\n}\n\n// src/room.tsx\nvar SMOOTH_DELAY = 1e3;\nvar noop3 = () => {\n};\nvar identity2 = (x) => x;\nvar missing_unstable_batchedUpdates = (reactVersion, roomId) => `We noticed you\\u2019re using React ${reactVersion}. Please pass unstable_batchedUpdates at the RoomProvider level until you\\u2019re ready to upgrade to React 18:\n\n    import { unstable_batchedUpdates } from \"react-dom\";  // or \"react-native\"\n\n    <RoomProvider id=${JSON.stringify(\n  roomId\n)} ... unstable_batchedUpdates={unstable_batchedUpdates}>\n      ...\n    </RoomProvider>\n\nWhy? Please see https://liveblocks.io/docs/platform/troubleshooting#stale-props-zombie-child for more information`;\nvar superfluous_unstable_batchedUpdates = \"You don\\u2019t need to pass unstable_batchedUpdates to RoomProvider anymore, since you\\u2019re on React 18+ already.\";\nfunction useSyncExternalStore2(s, gs, gss) {\n  return _withselectorjs.useSyncExternalStoreWithSelector.call(void 0, s, gs, gss, identity2);\n}\nvar STABLE_EMPTY_LIST = Object.freeze([]);\nfunction alwaysEmptyList() {\n  return STABLE_EMPTY_LIST;\n}\nfunction alwaysNull() {\n  return null;\n}\nfunction selectorFor_useOthersConnectionIds(others) {\n  return others.map((user) => user.connectionId);\n}\nfunction makeMutationContext(room) {\n  const cannotUseUntil = \"This mutation cannot be used until\";\n  const needsPresence = `${cannotUseUntil} connected to the Liveblocks room`;\n  const needsStorage = `${cannotUseUntil} storage has been loaded`;\n  return {\n    get storage() {\n      const mutableRoot = room.getStorageSnapshot();\n      if (mutableRoot === null) {\n        throw new Error(needsStorage);\n      }\n      return mutableRoot;\n    },\n    get self() {\n      const self = room.getSelf();\n      if (self === null) {\n        throw new Error(needsPresence);\n      }\n      return self;\n    },\n    get others() {\n      const others = room.getOthers();\n      if (room.getSelf() === null) {\n        throw new Error(needsPresence);\n      }\n      return others;\n    },\n    setMyPresence: room.updatePresence\n  };\n}\nfunction getCurrentUserId(room) {\n  const self = room.getSelf();\n  if (self === null || self.id === void 0) {\n    return \"anonymous\";\n  } else {\n    return self.id;\n  }\n}\nfunction handleApiError(err) {\n  const message = `Request failed with status ${err.status}: ${err.message}`;\n  if (_optionalChain([err, 'access', _11 => _11.details, 'optionalAccess', _12 => _12.error]) === \"FORBIDDEN\") {\n    const detailedMessage = [message, err.details.suggestion, err.details.docs].filter(Boolean).join(\"\\n\");\n    _core.console.error(detailedMessage);\n  }\n  return new Error(message);\n}\nvar _extras2 = /* @__PURE__ */ new WeakMap();\nvar _bundles2 = /* @__PURE__ */ new WeakMap();\nfunction getOrCreateRoomContextBundle(client) {\n  let bundle = _bundles2.get(client);\n  if (!bundle) {\n    bundle = makeRoomContextBundle(client);\n    _bundles2.set(client, bundle);\n  }\n  return bundle;\n}\nfunction getRoomExtrasForClient(client) {\n  let extras = _extras2.get(client);\n  if (!extras) {\n    extras = makeRoomExtrasForClient(client);\n    _extras2.set(client, extras);\n  }\n  return extras;\n}\nfunction makeRoomExtrasForClient(client) {\n  const store = getUmbrellaStoreForClient(client);\n  const commentsErrorEventSource = _core.makeEventSource.call(void 0, );\n  function onMutationFailure(innerError, optimisticUpdateId, createPublicError) {\n    store.removeOptimisticUpdate(optimisticUpdateId);\n    if (innerError instanceof _core.HttpError) {\n      const error = handleApiError(innerError);\n      commentsErrorEventSource.notify(createPublicError(error));\n      return;\n    }\n    if (innerError instanceof _core.HttpError) {\n      handleApiError(innerError);\n      return;\n    }\n    throw innerError;\n  }\n  const threadsPollersByRoomId = /* @__PURE__ */ new Map();\n  const versionsPollersByRoomId = /* @__PURE__ */ new Map();\n  const roomNotificationSettingsPollersByRoomId = /* @__PURE__ */ new Map();\n  function getOrCreateThreadsPollerForRoomId(roomId) {\n    let poller = threadsPollersByRoomId.get(roomId);\n    if (!poller) {\n      poller = _core.makePoller.call(void 0, \n        async (signal) => {\n          try {\n            return await store.fetchRoomThreadsDeltaUpdate(roomId, signal);\n          } catch (err) {\n            _core.console.warn(`Polling new threads for '${roomId}' failed: ${String(err)}`);\n            throw err;\n          }\n        },\n        config.ROOM_THREADS_POLL_INTERVAL,\n        { maxStaleTimeMs: config.ROOM_THREADS_MAX_STALE_TIME }\n      );\n      threadsPollersByRoomId.set(roomId, poller);\n    }\n    return poller;\n  }\n  function getOrCreateVersionsPollerForRoomId(roomId) {\n    let poller = versionsPollersByRoomId.get(roomId);\n    if (!poller) {\n      poller = _core.makePoller.call(void 0, \n        async (signal) => {\n          try {\n            return await store.fetchRoomVersionsDeltaUpdate(roomId, signal);\n          } catch (err) {\n            _core.console.warn(`Polling new history versions for '${roomId}' failed: ${String(err)}`);\n            throw err;\n          }\n        },\n        config.HISTORY_VERSIONS_POLL_INTERVAL,\n        { maxStaleTimeMs: config.HISTORY_VERSIONS_MAX_STALE_TIME }\n      );\n      versionsPollersByRoomId.set(roomId, poller);\n    }\n    return poller;\n  }\n  function getOrCreateNotificationsSettingsPollerForRoomId(roomId) {\n    let poller = roomNotificationSettingsPollersByRoomId.get(roomId);\n    if (!poller) {\n      poller = _core.makePoller.call(void 0, \n        async (signal) => {\n          try {\n            return await store.refreshRoomNotificationSettings(roomId, signal);\n          } catch (err) {\n            _core.console.warn(`Polling notification settings for '${roomId}' failed: ${String(err)}`);\n            throw err;\n          }\n        },\n        config.NOTIFICATION_SETTINGS_POLL_INTERVAL,\n        { maxStaleTimeMs: config.NOTIFICATION_SETTINGS_MAX_STALE_TIME }\n      );\n      roomNotificationSettingsPollersByRoomId.set(roomId, poller);\n    }\n    return poller;\n  }\n  return {\n    store,\n    commentsErrorEventSource: commentsErrorEventSource.observable,\n    onMutationFailure,\n    getOrCreateThreadsPollerForRoomId,\n    getOrCreateVersionsPollerForRoomId,\n    getOrCreateNotificationsSettingsPollerForRoomId\n  };\n}\nfunction makeRoomContextBundle(client) {\n  function RoomProvider_withImplicitLiveblocksProvider(props) {\n    return /* @__PURE__ */ React4.createElement(LiveblocksProviderWithClient, { client, allowNesting: true }, /* @__PURE__ */ React4.createElement(RoomProvider, { ...props }));\n  }\n  const shared = createSharedContext(client);\n  const bundle = {\n    RoomContext,\n    RoomProvider: RoomProvider_withImplicitLiveblocksProvider,\n    useRoom,\n    useStatus,\n    useStorageStatus,\n    useBatch,\n    useBroadcastEvent,\n    useOthersListener,\n    useLostConnectionListener,\n    useErrorListener,\n    useEventListener,\n    useHistory,\n    useUndo,\n    useRedo,\n    useCanRedo,\n    useCanUndo,\n    useStorageRoot,\n    useStorage,\n    useSelf,\n    useMyPresence,\n    useUpdateMyPresence,\n    useOthers,\n    useOthersMapped,\n    useOthersConnectionIds,\n    useOther,\n    useMutation,\n    useThreads,\n    useCreateThread,\n    useDeleteThread,\n    useEditThreadMetadata,\n    useMarkThreadAsResolved,\n    useMarkThreadAsUnresolved,\n    useCreateComment,\n    useEditComment,\n    useDeleteComment,\n    useAddReaction,\n    useRemoveReaction,\n    useMarkThreadAsRead,\n    useThreadSubscription,\n    useAttachmentUrl,\n    useHistoryVersions,\n    useHistoryVersionData,\n    useRoomNotificationSettings,\n    useUpdateRoomNotificationSettings,\n    ...shared.classic,\n    suspense: {\n      RoomContext,\n      RoomProvider: RoomProvider_withImplicitLiveblocksProvider,\n      useRoom,\n      useStatus,\n      useStorageStatus: useStorageStatusSuspense,\n      useBatch,\n      useBroadcastEvent,\n      useOthersListener,\n      useLostConnectionListener,\n      useErrorListener,\n      useEventListener,\n      useHistory,\n      useUndo,\n      useRedo,\n      useCanRedo,\n      useCanUndo,\n      useStorageRoot,\n      useStorage: useStorageSuspense,\n      useSelf: useSelfSuspense,\n      useMyPresence,\n      useUpdateMyPresence,\n      useOthers: useOthersSuspense,\n      useOthersMapped: useOthersMappedSuspense,\n      useOthersConnectionIds: useOthersConnectionIdsSuspense,\n      useOther: useOtherSuspense,\n      useMutation,\n      useThreads: useThreadsSuspense,\n      useCreateThread,\n      useDeleteThread,\n      useEditThreadMetadata,\n      useMarkThreadAsResolved,\n      useMarkThreadAsUnresolved,\n      useCreateComment,\n      useEditComment,\n      useDeleteComment,\n      useAddReaction,\n      useRemoveReaction,\n      useMarkThreadAsRead,\n      useThreadSubscription,\n      useAttachmentUrl: useAttachmentUrlSuspense,\n      // TODO: useHistoryVersionData: useHistoryVersionDataSuspense,\n      useHistoryVersions: useHistoryVersionsSuspense,\n      useRoomNotificationSettings: useRoomNotificationSettingsSuspense,\n      useUpdateRoomNotificationSettings,\n      ...shared.suspense\n    },\n    useCommentsErrorListener\n  };\n  return Object.defineProperty(bundle, _core.kInternal, {\n    enumerable: false\n  });\n}\nfunction RoomProvider(props) {\n  const client = useClient();\n  const [cache] = React4.useState(\n    () => /* @__PURE__ */ new Map()\n  );\n  const stableEnterRoom = React4.useCallback(\n    (roomId, options) => {\n      const cached = cache.get(roomId);\n      if (cached) return cached;\n      const rv = client.enterRoom(roomId, options);\n      const origLeave = rv.leave;\n      rv.leave = () => {\n        origLeave();\n        cache.delete(roomId);\n      };\n      cache.set(roomId, rv);\n      return rv;\n    },\n    [client, cache]\n  );\n  return /* @__PURE__ */ React4.createElement(\n    RoomProviderInner,\n    {\n      ...props,\n      stableEnterRoom\n    }\n  );\n}\nfunction RoomProviderInner(props) {\n  const client = useClient();\n  const { id: roomId, stableEnterRoom } = props;\n  if (process.env.NODE_ENV !== \"production\") {\n    if (!roomId) {\n      throw new Error(\n        \"RoomProvider id property is required. For more information: https://liveblocks.io/docs/errors/liveblocks-react/RoomProvider-id-property-is-required\"\n      );\n    }\n    if (!isString(roomId)) {\n      throw new Error(\"RoomProvider id property should be a string.\");\n    }\n    const majorReactVersion = parseInt(React4.version) || 1;\n    const oldReactVersion = majorReactVersion < 18;\n    _core.errorIf.call(void 0, \n      oldReactVersion && props.unstable_batchedUpdates === void 0,\n      missing_unstable_batchedUpdates(majorReactVersion, roomId)\n    );\n    _core.deprecateIf.call(void 0, \n      !oldReactVersion && props.unstable_batchedUpdates !== void 0,\n      superfluous_unstable_batchedUpdates\n    );\n  }\n  const frozenProps = useInitial({\n    initialPresence: props.initialPresence,\n    initialStorage: props.initialStorage,\n    unstable_batchedUpdates: props.unstable_batchedUpdates,\n    autoConnect: _nullishCoalesce(props.autoConnect, () => ( typeof window !== \"undefined\"))\n  });\n  const [{ room }, setRoomLeavePair] = React4.useState(\n    () => stableEnterRoom(roomId, {\n      ...frozenProps,\n      autoConnect: false\n      // Deliberately using false here on the first render, see below\n    })\n  );\n  React4.useEffect(() => {\n    const { store } = getRoomExtrasForClient(client);\n    async function handleCommentEvent(message) {\n      if (message.type === _core.ServerMsgCode.THREAD_DELETED) {\n        store.deleteThread(message.threadId, null);\n        return;\n      }\n      const info = await room.getThread(message.threadId);\n      if (!info.thread) {\n        store.deleteThread(message.threadId, null);\n        return;\n      }\n      const { thread, inboxNotification } = info;\n      const existingThread = store.getFullState().threadsDB.getEvenIfDeleted(message.threadId);\n      switch (message.type) {\n        case _core.ServerMsgCode.COMMENT_EDITED:\n        case _core.ServerMsgCode.THREAD_METADATA_UPDATED:\n        case _core.ServerMsgCode.THREAD_UPDATED:\n        case _core.ServerMsgCode.COMMENT_REACTION_ADDED:\n        case _core.ServerMsgCode.COMMENT_REACTION_REMOVED:\n        case _core.ServerMsgCode.COMMENT_DELETED:\n          if (!existingThread) break;\n          store.updateThreadAndNotification(thread, inboxNotification);\n          break;\n        case _core.ServerMsgCode.COMMENT_CREATED:\n          store.updateThreadAndNotification(thread, inboxNotification);\n          break;\n        default:\n          break;\n      }\n    }\n    return room.events.comments.subscribe(\n      (message) => void handleCommentEvent(message)\n    );\n  }, [client, room]);\n  React4.useEffect(() => {\n    const pair = stableEnterRoom(roomId, frozenProps);\n    setRoomLeavePair(pair);\n    const { room: room2, leave } = pair;\n    if (frozenProps.autoConnect) {\n      room2.connect();\n    }\n    return () => {\n      leave();\n    };\n  }, [roomId, frozenProps, stableEnterRoom]);\n  return /* @__PURE__ */ React4.createElement(RoomContext.Provider, { value: room }, props.children);\n}\nfunction useRoom() {\n  const room = useRoomOrNull();\n  if (room === null) {\n    throw new Error(\"RoomProvider is missing from the React tree.\");\n  }\n  return room;\n}\nfunction useStatus() {\n  const room = useRoom();\n  const subscribe = room.events.status.subscribe;\n  const getSnapshot = room.getStatus;\n  const getServerSnapshot = room.getStatus;\n  return useSyncExternalStore2(subscribe, getSnapshot, getServerSnapshot);\n}\nfunction useStorageStatus(options) {\n  const smooth = useInitial(_nullishCoalesce(_optionalChain([options, 'optionalAccess', _13 => _13.smooth]), () => ( false)));\n  if (smooth) {\n    return useStorageStatusSmooth();\n  } else {\n    return useStorageStatusImmediate();\n  }\n}\nfunction useStorageStatusImmediate() {\n  const room = useRoom();\n  const subscribe = room.events.storageStatus.subscribe;\n  const getSnapshot = room.getStorageStatus;\n  const getServerSnapshot = room.getStorageStatus;\n  return useSyncExternalStore2(subscribe, getSnapshot, getServerSnapshot);\n}\nfunction useStorageStatusSmooth() {\n  const room = useRoom();\n  const [status, setStatus] = React4.useState(room.getStorageStatus);\n  const oldStatus = useLatest(room.getStorageStatus());\n  React4.useEffect(() => {\n    let timeoutId;\n    const unsub = room.events.storageStatus.subscribe((newStatus) => {\n      if (oldStatus.current === \"synchronizing\" && newStatus === \"synchronized\") {\n        timeoutId = setTimeout(() => setStatus(newStatus), SMOOTH_DELAY);\n      } else {\n        clearTimeout(timeoutId);\n        setStatus(newStatus);\n      }\n    });\n    return () => {\n      clearTimeout(timeoutId);\n      unsub();\n    };\n  }, [room, oldStatus]);\n  return status;\n}\nfunction useBatch() {\n  return useRoom().batch;\n}\nfunction useBroadcastEvent() {\n  const room = useRoom();\n  return React4.useCallback(\n    (event, options = { shouldQueueEventIfNotReady: false }) => {\n      room.broadcastEvent(event, options);\n    },\n    [room]\n  );\n}\nfunction useOthersListener(callback) {\n  const room = useRoom();\n  const savedCallback = useLatest(callback);\n  React4.useEffect(\n    () => room.events.others.subscribe((event) => savedCallback.current(event)),\n    [room, savedCallback]\n  );\n}\nfunction useLostConnectionListener(callback) {\n  const room = useRoom();\n  const savedCallback = useLatest(callback);\n  React4.useEffect(\n    () => room.events.lostConnection.subscribe(\n      (event) => savedCallback.current(event)\n    ),\n    [room, savedCallback]\n  );\n}\nfunction useErrorListener(callback) {\n  const room = useRoom();\n  const savedCallback = useLatest(callback);\n  React4.useEffect(\n    () => room.events.error.subscribe((e) => savedCallback.current(e)),\n    [room, savedCallback]\n  );\n}\nfunction useEventListener(callback) {\n  const room = useRoom();\n  const savedCallback = useLatest(callback);\n  React4.useEffect(() => {\n    const listener = (eventData) => {\n      savedCallback.current(eventData);\n    };\n    return room.events.customEvent.subscribe(listener);\n  }, [room, savedCallback]);\n}\nfunction useHistory() {\n  return useRoom().history;\n}\nfunction useUndo() {\n  return useHistory().undo;\n}\nfunction useRedo() {\n  return useHistory().redo;\n}\nfunction useCanUndo() {\n  const room = useRoom();\n  const subscribe = room.events.history.subscribe;\n  const canUndo = room.history.canUndo;\n  return useSyncExternalStore2(subscribe, canUndo, canUndo);\n}\nfunction useCanRedo() {\n  const room = useRoom();\n  const subscribe = room.events.history.subscribe;\n  const canRedo = room.history.canRedo;\n  return useSyncExternalStore2(subscribe, canRedo, canRedo);\n}\nfunction useSelf(maybeSelector, isEqual) {\n  const room = useRoom();\n  const subscribe = room.events.self.subscribe;\n  const getSnapshot = room.getSelf;\n  const selector = _nullishCoalesce(maybeSelector, () => ( identity2));\n  const wrappedSelector = React4.useCallback(\n    (me) => me !== null ? selector(me) : null,\n    [selector]\n  );\n  const getServerSnapshot = alwaysNull;\n  return _withselectorjs.useSyncExternalStoreWithSelector.call(void 0, \n    subscribe,\n    getSnapshot,\n    getServerSnapshot,\n    wrappedSelector,\n    isEqual\n  );\n}\nfunction useMyPresence() {\n  const room = useRoom();\n  const subscribe = room.events.myPresence.subscribe;\n  const getSnapshot = room.getPresence;\n  const presence = useSyncExternalStore2(subscribe, getSnapshot, getSnapshot);\n  const setPresence = room.updatePresence;\n  return [presence, setPresence];\n}\nfunction useUpdateMyPresence() {\n  return useRoom().updatePresence;\n}\nfunction useOthers(selector, isEqual) {\n  const room = useRoom();\n  const subscribe = room.events.others.subscribe;\n  const getSnapshot = room.getOthers;\n  const getServerSnapshot = alwaysEmptyList;\n  return _withselectorjs.useSyncExternalStoreWithSelector.call(void 0, \n    subscribe,\n    getSnapshot,\n    getServerSnapshot,\n    _nullishCoalesce(selector, () => ( identity2)),\n    isEqual\n  );\n}\nfunction useOthersMapped(itemSelector, itemIsEqual) {\n  const wrappedSelector = React4.useCallback(\n    (others) => others.map((other) => [other.connectionId, itemSelector(other)]),\n    [itemSelector]\n  );\n  const wrappedIsEqual = React4.useCallback(\n    (a, b) => {\n      const eq = _nullishCoalesce(itemIsEqual, () => ( Object.is));\n      return a.length === b.length && a.every((atuple, index) => {\n        const btuple = b[index];\n        return atuple[0] === btuple[0] && eq(atuple[1], btuple[1]);\n      });\n    },\n    [itemIsEqual]\n  );\n  return useOthers(wrappedSelector, wrappedIsEqual);\n}\nfunction useOthersConnectionIds() {\n  return useOthers(selectorFor_useOthersConnectionIds, _client2.shallow);\n}\nvar NOT_FOUND = Symbol();\nfunction useOther(connectionId, selector, isEqual) {\n  const wrappedSelector = React4.useCallback(\n    (others) => {\n      const other2 = others.find((other3) => other3.connectionId === connectionId);\n      return other2 !== void 0 ? selector(other2) : NOT_FOUND;\n    },\n    [connectionId, selector]\n  );\n  const wrappedIsEqual = React4.useCallback(\n    (prev, curr) => {\n      if (prev === NOT_FOUND || curr === NOT_FOUND) {\n        return prev === curr;\n      }\n      const eq = _nullishCoalesce(isEqual, () => ( Object.is));\n      return eq(prev, curr);\n    },\n    [isEqual]\n  );\n  const other = useOthers(wrappedSelector, wrappedIsEqual);\n  if (other === NOT_FOUND) {\n    throw new Error(\n      `No such other user with connection id ${connectionId} exists`\n    );\n  }\n  return other;\n}\nfunction useMutableStorageRoot() {\n  const room = useRoom();\n  const subscribe = room.events.storageDidLoad.subscribeOnce;\n  const getSnapshot = room.getStorageSnapshot;\n  const getServerSnapshot = alwaysNull;\n  return useSyncExternalStore2(subscribe, getSnapshot, getServerSnapshot);\n}\nfunction useStorageRoot() {\n  return [useMutableStorageRoot()];\n}\nfunction useStorage(selector, isEqual) {\n  const room = useRoom();\n  const rootOrNull = useMutableStorageRoot();\n  const wrappedSelector = React4.useCallback(\n    (rootOrNull2) => rootOrNull2 !== null ? selector(rootOrNull2) : null,\n    [selector]\n  );\n  const subscribe = React4.useCallback(\n    (onStoreChange) => rootOrNull !== null ? room.subscribe(rootOrNull, onStoreChange, { isDeep: true }) : noop3,\n    [room, rootOrNull]\n  );\n  const getSnapshot = React4.useCallback(() => {\n    if (rootOrNull === null) {\n      return null;\n    } else {\n      const root = rootOrNull;\n      const imm = root.toImmutable();\n      return imm;\n    }\n  }, [rootOrNull]);\n  const getServerSnapshot = alwaysNull;\n  return _withselectorjs.useSyncExternalStoreWithSelector.call(void 0, \n    subscribe,\n    getSnapshot,\n    getServerSnapshot,\n    wrappedSelector,\n    isEqual\n  );\n}\nfunction useMutation(callback, deps) {\n  const room = useRoom();\n  return React4.useMemo(\n    () => {\n      return (...args) => (\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        room.batch(\n          () => (\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n            callback(\n              makeMutationContext(room),\n              ...args\n            )\n          )\n        )\n      );\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [room, ...deps]\n  );\n}\nfunction useThreads(options = {\n  query: { metadata: {} }\n}) {\n  const { scrollOnLoad = true } = options;\n  const client = useClient();\n  const room = useRoom();\n  const { store, getOrCreateThreadsPollerForRoomId } = getRoomExtrasForClient(client);\n  const poller = getOrCreateThreadsPollerForRoomId(room.id);\n  React4.useEffect(\n    () => {\n      void store.waitUntilRoomThreadsLoaded(room.id, options.query);\n    }\n    // NOTE: Deliberately *not* using a dependency array here!\n    //\n    // It is important to call waitUntil on *every* render.\n    // This is harmless though, on most renders, except:\n    // 1. The very first render, in which case we'll want to trigger the initial page fetch.\n    // 2. All other subsequent renders now \"just\" return the same promise (a quick operation).\n    // 3. If ever the promise would fail, then after 5 seconds it would reset, and on the very\n    //    *next* render after that, a *new* fetch/promise will get created.\n  );\n  React4.useEffect(() => {\n    poller.inc();\n    poller.pollNowIfStale();\n    return () => poller.dec();\n  }, [poller]);\n  const getter = React4.useCallback(\n    () => store.getRoomThreadsLoadingState(room.id, options.query),\n    [store, room.id, options.query]\n  );\n  const state = _withselectorjs.useSyncExternalStoreWithSelector.call(void 0, \n    store.subscribe,\n    getter,\n    getter,\n    identity2,\n    shallow2\n    // NOTE: Using 2-level-deep shallow check here, because the result of selectThreads() is not stable!\n  );\n  useScrollToCommentOnLoadEffect(scrollOnLoad, state);\n  return state;\n}\nfunction useCommentsErrorListener(callback) {\n  const client = useClient();\n  const savedCallback = useLatest(callback);\n  const { commentsErrorEventSource } = getRoomExtrasForClient(client);\n  React4.useEffect(() => {\n    return commentsErrorEventSource.subscribe(savedCallback.current);\n  }, [savedCallback, commentsErrorEventSource]);\n}\nfunction useCreateThread() {\n  const client = useClient();\n  const room = useRoom();\n  return React4.useCallback(\n    (options) => {\n      const body = options.body;\n      const metadata = _nullishCoalesce(options.metadata, () => ( {}));\n      const attachments = options.attachments;\n      const threadId = _core.createThreadId.call(void 0, );\n      const commentId = _core.createCommentId.call(void 0, );\n      const createdAt = /* @__PURE__ */ new Date();\n      const newComment = {\n        id: commentId,\n        threadId,\n        roomId: room.id,\n        createdAt,\n        type: \"comment\",\n        userId: getCurrentUserId(room),\n        body,\n        reactions: [],\n        attachments: _nullishCoalesce(attachments, () => ( []))\n      };\n      const newThread = {\n        id: threadId,\n        type: \"thread\",\n        createdAt,\n        updatedAt: createdAt,\n        roomId: room.id,\n        metadata,\n        comments: [newComment],\n        resolved: false\n      };\n      const { store, onMutationFailure } = getRoomExtrasForClient(client);\n      const optimisticUpdateId = store.addOptimisticUpdate({\n        type: \"create-thread\",\n        thread: newThread,\n        roomId: room.id\n      });\n      const attachmentIds = _optionalChain([attachments, 'optionalAccess', _14 => _14.map, 'call', _15 => _15((attachment) => attachment.id)]);\n      room.createThread({ threadId, commentId, body, metadata, attachmentIds }).then(\n        (thread) => {\n          store.createThread(optimisticUpdateId, thread);\n        },\n        (err) => onMutationFailure(\n          err,\n          optimisticUpdateId,\n          (err2) => new CreateThreadError(err2, {\n            roomId: room.id,\n            threadId,\n            commentId,\n            body,\n            metadata\n          })\n        )\n      );\n      return newThread;\n    },\n    [client, room]\n  );\n}\nfunction useDeleteThread() {\n  const client = useClient();\n  const room = useRoom();\n  return React4.useCallback(\n    (threadId) => {\n      const { store, onMutationFailure } = getRoomExtrasForClient(client);\n      const userId = getCurrentUserId(room);\n      const existing = store.getFullState().threadsDB.get(threadId);\n      if (_optionalChain([existing, 'optionalAccess', _16 => _16.comments, 'optionalAccess', _17 => _17[0], 'optionalAccess', _18 => _18.userId]) !== userId) {\n        throw new Error(\"Only the thread creator can delete the thread\");\n      }\n      const optimisticUpdateId = store.addOptimisticUpdate({\n        type: \"delete-thread\",\n        roomId: room.id,\n        threadId,\n        deletedAt: /* @__PURE__ */ new Date()\n      });\n      room.deleteThread(threadId).then(\n        () => {\n          store.deleteThread(threadId, optimisticUpdateId);\n        },\n        (err) => onMutationFailure(\n          err,\n          optimisticUpdateId,\n          (err2) => new DeleteThreadError(err2, { roomId: room.id, threadId })\n        )\n      );\n    },\n    [client, room]\n  );\n}\nfunction useEditThreadMetadata() {\n  const client = useClient();\n  const room = useRoom();\n  return React4.useCallback(\n    (options) => {\n      if (!options.metadata) {\n        return;\n      }\n      const threadId = options.threadId;\n      const metadata = options.metadata;\n      const updatedAt = /* @__PURE__ */ new Date();\n      const { store, onMutationFailure } = getRoomExtrasForClient(client);\n      const optimisticUpdateId = store.addOptimisticUpdate({\n        type: \"edit-thread-metadata\",\n        metadata,\n        threadId,\n        updatedAt\n      });\n      room.editThreadMetadata({ threadId, metadata }).then(\n        (metadata2) => (\n          // Replace the optimistic update by the real thing\n          store.patchThread(\n            threadId,\n            optimisticUpdateId,\n            { metadata: metadata2 },\n            updatedAt\n          )\n        ),\n        (err) => onMutationFailure(\n          err,\n          optimisticUpdateId,\n          (error) => new EditThreadMetadataError(error, {\n            roomId: room.id,\n            threadId,\n            metadata\n          })\n        )\n      );\n    },\n    [client, room]\n  );\n}\nfunction useCreateComment() {\n  const client = useClient();\n  const room = useRoom();\n  return React4.useCallback(\n    ({ threadId, body, attachments }) => {\n      const commentId = _core.createCommentId.call(void 0, );\n      const createdAt = /* @__PURE__ */ new Date();\n      const comment = {\n        id: commentId,\n        threadId,\n        roomId: room.id,\n        type: \"comment\",\n        createdAt,\n        userId: getCurrentUserId(room),\n        body,\n        reactions: [],\n        attachments: _nullishCoalesce(attachments, () => ( []))\n      };\n      const { store, onMutationFailure } = getRoomExtrasForClient(client);\n      const optimisticUpdateId = store.addOptimisticUpdate({\n        type: \"create-comment\",\n        comment\n      });\n      const attachmentIds = _optionalChain([attachments, 'optionalAccess', _19 => _19.map, 'call', _20 => _20((attachment) => attachment.id)]);\n      room.createComment({ threadId, commentId, body, attachmentIds }).then(\n        (newComment) => {\n          store.createComment(newComment, optimisticUpdateId);\n        },\n        (err) => onMutationFailure(\n          err,\n          optimisticUpdateId,\n          (err2) => new CreateCommentError(err2, {\n            roomId: room.id,\n            threadId,\n            commentId,\n            body\n          })\n        )\n      );\n      return comment;\n    },\n    [client, room]\n  );\n}\nfunction useEditComment() {\n  const client = useClient();\n  const room = useRoom();\n  return React4.useCallback(\n    ({ threadId, commentId, body, attachments }) => {\n      const editedAt = /* @__PURE__ */ new Date();\n      const { store, onMutationFailure } = getRoomExtrasForClient(client);\n      const existing = store.getFullState().threadsDB.getEvenIfDeleted(threadId);\n      if (existing === void 0) {\n        _core.console.warn(\n          `Internal unexpected behavior. Cannot edit comment in thread \"${threadId}\" because the thread does not exist in the cache.`\n        );\n        return;\n      }\n      const comment = existing.comments.find(\n        (comment2) => comment2.id === commentId\n      );\n      if (comment === void 0 || comment.deletedAt !== void 0) {\n        _core.console.warn(\n          `Internal unexpected behavior. Cannot edit comment \"${commentId}\" in thread \"${threadId}\" because the comment does not exist in the cache.`\n        );\n        return;\n      }\n      const optimisticUpdateId = store.addOptimisticUpdate({\n        type: \"edit-comment\",\n        comment: {\n          ...comment,\n          editedAt,\n          body,\n          attachments: _nullishCoalesce(attachments, () => ( []))\n        }\n      });\n      const attachmentIds = _optionalChain([attachments, 'optionalAccess', _21 => _21.map, 'call', _22 => _22((attachment) => attachment.id)]);\n      room.editComment({ threadId, commentId, body, attachmentIds }).then(\n        (editedComment) => {\n          store.editComment(threadId, optimisticUpdateId, editedComment);\n        },\n        (err) => onMutationFailure(\n          err,\n          optimisticUpdateId,\n          (error) => new EditCommentError(error, {\n            roomId: room.id,\n            threadId,\n            commentId,\n            body\n          })\n        )\n      );\n    },\n    [client, room]\n  );\n}\nfunction useDeleteComment() {\n  const client = useClient();\n  const room = useRoom();\n  return React4.useCallback(\n    ({ threadId, commentId }) => {\n      const deletedAt = /* @__PURE__ */ new Date();\n      const { store, onMutationFailure } = getRoomExtrasForClient(client);\n      const optimisticUpdateId = store.addOptimisticUpdate({\n        type: \"delete-comment\",\n        threadId,\n        commentId,\n        deletedAt,\n        roomId: room.id\n      });\n      room.deleteComment({ threadId, commentId }).then(\n        () => {\n          store.deleteComment(\n            threadId,\n            optimisticUpdateId,\n            commentId,\n            deletedAt\n          );\n        },\n        (err) => onMutationFailure(\n          err,\n          optimisticUpdateId,\n          (error) => new DeleteCommentError(error, {\n            roomId: room.id,\n            threadId,\n            commentId\n          })\n        )\n      );\n    },\n    [client, room]\n  );\n}\nfunction useAddReaction() {\n  const client = useClient();\n  const room = useRoom();\n  return React4.useCallback(\n    ({ threadId, commentId, emoji }) => {\n      const createdAt = /* @__PURE__ */ new Date();\n      const userId = getCurrentUserId(room);\n      const { store, onMutationFailure } = getRoomExtrasForClient(client);\n      const optimisticUpdateId = store.addOptimisticUpdate({\n        type: \"add-reaction\",\n        threadId,\n        commentId,\n        reaction: {\n          emoji,\n          userId,\n          createdAt\n        }\n      });\n      room.addReaction({ threadId, commentId, emoji }).then(\n        (addedReaction) => {\n          store.addReaction(\n            threadId,\n            optimisticUpdateId,\n            commentId,\n            addedReaction,\n            createdAt\n          );\n        },\n        (err) => onMutationFailure(\n          err,\n          optimisticUpdateId,\n          (error) => new AddReactionError(error, {\n            roomId: room.id,\n            threadId,\n            commentId,\n            emoji\n          })\n        )\n      );\n    },\n    [client, room]\n  );\n}\nfunction useRemoveReaction() {\n  const client = useClient();\n  const room = useRoom();\n  return React4.useCallback(\n    ({ threadId, commentId, emoji }) => {\n      const userId = getCurrentUserId(room);\n      const removedAt = /* @__PURE__ */ new Date();\n      const { store, onMutationFailure } = getRoomExtrasForClient(client);\n      const optimisticUpdateId = store.addOptimisticUpdate({\n        type: \"remove-reaction\",\n        threadId,\n        commentId,\n        emoji,\n        userId,\n        removedAt\n      });\n      room.removeReaction({ threadId, commentId, emoji }).then(\n        () => {\n          store.removeReaction(\n            threadId,\n            optimisticUpdateId,\n            commentId,\n            emoji,\n            userId,\n            removedAt\n          );\n        },\n        (err) => onMutationFailure(\n          err,\n          optimisticUpdateId,\n          (error) => new RemoveReactionError(error, {\n            roomId: room.id,\n            threadId,\n            commentId,\n            emoji\n          })\n        )\n      );\n    },\n    [client, room]\n  );\n}\nfunction useMarkThreadAsRead() {\n  const client = useClient();\n  const room = useRoom();\n  return React4.useCallback(\n    (threadId) => {\n      const { store, onMutationFailure } = getRoomExtrasForClient(client);\n      const inboxNotification = Object.values(\n        store.getFullState().notificationsById\n      ).find(\n        (inboxNotification2) => inboxNotification2.kind === \"thread\" && inboxNotification2.threadId === threadId\n      );\n      if (!inboxNotification) return;\n      const now = /* @__PURE__ */ new Date();\n      const optimisticUpdateId = store.addOptimisticUpdate({\n        type: \"mark-inbox-notification-as-read\",\n        inboxNotificationId: inboxNotification.id,\n        readAt: now\n      });\n      room.markInboxNotificationAsRead(inboxNotification.id).then(\n        () => {\n          store.updateInboxNotification(\n            inboxNotification.id,\n            optimisticUpdateId,\n            (inboxNotification2) => ({ ...inboxNotification2, readAt: now })\n          );\n        },\n        (err) => {\n          onMutationFailure(\n            err,\n            optimisticUpdateId,\n            (error) => new MarkInboxNotificationAsReadError(error, {\n              inboxNotificationId: inboxNotification.id\n            })\n          );\n          return;\n        }\n      );\n    },\n    [client, room]\n  );\n}\nfunction useMarkThreadAsResolved() {\n  const client = useClient();\n  const room = useRoom();\n  return React4.useCallback(\n    (threadId) => {\n      const updatedAt = /* @__PURE__ */ new Date();\n      const { store, onMutationFailure } = getRoomExtrasForClient(client);\n      const optimisticUpdateId = store.addOptimisticUpdate({\n        type: \"mark-thread-as-resolved\",\n        threadId,\n        updatedAt\n      });\n      room.markThreadAsResolved(threadId).then(\n        () => {\n          store.patchThread(\n            threadId,\n            optimisticUpdateId,\n            { resolved: true },\n            updatedAt\n          );\n        },\n        (err) => onMutationFailure(\n          err,\n          optimisticUpdateId,\n          (error) => new MarkThreadAsResolvedError(error, {\n            roomId: room.id,\n            threadId\n          })\n        )\n      );\n    },\n    [client, room]\n  );\n}\nfunction useMarkThreadAsUnresolved() {\n  const client = useClient();\n  const room = useRoom();\n  return React4.useCallback(\n    (threadId) => {\n      const updatedAt = /* @__PURE__ */ new Date();\n      const { store, onMutationFailure } = getRoomExtrasForClient(client);\n      const optimisticUpdateId = store.addOptimisticUpdate({\n        type: \"mark-thread-as-unresolved\",\n        threadId,\n        updatedAt\n      });\n      room.markThreadAsUnresolved(threadId).then(\n        () => {\n          store.patchThread(\n            threadId,\n            optimisticUpdateId,\n            { resolved: false },\n            updatedAt\n          );\n        },\n        (err) => onMutationFailure(\n          err,\n          optimisticUpdateId,\n          (error) => new MarkThreadAsUnresolvedError(error, {\n            roomId: room.id,\n            threadId\n          })\n        )\n      );\n    },\n    [client, room]\n  );\n}\nfunction useThreadSubscription(threadId) {\n  const client = useClient();\n  const { store } = getRoomExtrasForClient(client);\n  const selector = React4.useCallback(\n    (state) => {\n      const notification = state.cleanedNotifications.find(\n        (inboxNotification) => inboxNotification.kind === \"thread\" && inboxNotification.threadId === threadId\n      );\n      const thread = state.threadsDB.get(threadId);\n      if (notification === void 0 || thread === void 0) {\n        return { status: \"not-subscribed\" };\n      }\n      return {\n        status: \"subscribed\",\n        unreadSince: notification.readAt\n      };\n    },\n    [threadId]\n  );\n  return _withselectorjs.useSyncExternalStoreWithSelector.call(void 0, \n    store.subscribe,\n    store.getFullState,\n    store.getFullState,\n    selector\n  );\n}\nfunction useRoomNotificationSettings() {\n  const updateRoomNotificationSettings = useUpdateRoomNotificationSettings();\n  const client = useClient();\n  const room = useRoom();\n  const { store, getOrCreateNotificationsSettingsPollerForRoomId } = getRoomExtrasForClient(client);\n  const poller = getOrCreateNotificationsSettingsPollerForRoomId(room.id);\n  React4.useEffect(\n    () => {\n      void store.waitUntilRoomNotificationSettingsLoaded(room.id);\n    }\n    // NOTE: Deliberately *not* using a dependency array here!\n    //\n    // It is important to call waitUntil on *every* render.\n    // This is harmless though, on most renders, except:\n    // 1. The very first render, in which case we'll want to trigger the initial page fetch.\n    // 2. All other subsequent renders now \"just\" return the same promise (a quick operation).\n    // 3. If ever the promise would fail, then after 5 seconds it would reset, and on the very\n    //    *next* render after that, a *new* fetch/promise will get created.\n  );\n  React4.useEffect(() => {\n    poller.inc();\n    poller.pollNowIfStale();\n    return () => {\n      poller.dec();\n    };\n  }, [poller]);\n  const getter = React4.useCallback(\n    () => store.getNotificationSettingsLoadingState(room.id),\n    [store, room.id]\n  );\n  const settings = _withselectorjs.useSyncExternalStoreWithSelector.call(void 0, \n    store.subscribe,\n    getter,\n    getter,\n    identity2,\n    shallow2\n  );\n  return React4.useMemo(() => {\n    return [settings, updateRoomNotificationSettings];\n  }, [settings, updateRoomNotificationSettings]);\n}\nfunction useRoomNotificationSettingsSuspense() {\n  const client = useClient();\n  const store = getRoomExtrasForClient(client).store;\n  const room = useRoom();\n  use(store.waitUntilRoomNotificationSettingsLoaded(room.id));\n  const [settings, updateRoomNotificationSettings] = useRoomNotificationSettings();\n  _core.assert.call(void 0, !settings.error, \"Did not expect error\");\n  _core.assert.call(void 0, !settings.isLoading, \"Did not expect loading\");\n  return React4.useMemo(() => {\n    return [settings, updateRoomNotificationSettings];\n  }, [settings, updateRoomNotificationSettings]);\n}\nfunction useHistoryVersionData(versionId) {\n  const [state, setState] = React4.useState({\n    isLoading: true\n  });\n  const room = useRoom();\n  React4.useEffect(() => {\n    setState({ isLoading: true });\n    const load = async () => {\n      try {\n        const response = await room[_core.kInternal].getTextVersion(versionId);\n        const buffer = await response.arrayBuffer();\n        const data = new Uint8Array(buffer);\n        setState({\n          isLoading: false,\n          data\n        });\n      } catch (error) {\n        setState({\n          isLoading: false,\n          error: error instanceof Error ? error : new Error(\n            \"An unknown error occurred while loading this version\"\n          )\n        });\n      }\n    };\n    void load();\n  }, [room, versionId]);\n  return state;\n}\nfunction useHistoryVersions() {\n  const client = useClient();\n  const room = useRoom();\n  const { store, getOrCreateVersionsPollerForRoomId } = getRoomExtrasForClient(client);\n  const poller = getOrCreateVersionsPollerForRoomId(room.id);\n  React4.useEffect(() => {\n    poller.inc();\n    poller.pollNowIfStale();\n    return () => poller.dec();\n  }, [poller]);\n  const getter = React4.useCallback(\n    () => store.getRoomVersionsLoadingState(room.id),\n    [store, room.id]\n  );\n  React4.useEffect(\n    () => {\n      void store.waitUntilRoomVersionsLoaded(room.id);\n    }\n    // NOTE: Deliberately *not* using a dependency array here!\n    //\n    // It is important to call waitUntil on *every* render.\n    // This is harmless though, on most renders, except:\n    // 1. The very first render, in which case we'll want to trigger the initial page fetch.\n    // 2. All other subsequent renders now \"just\" return the same promise (a quick operation).\n    // 3. If ever the promise would fail, then after 5 seconds it would reset, and on the very\n    //    *next* render after that, a *new* fetch/promise will get created.\n  );\n  const state = _withselectorjs.useSyncExternalStoreWithSelector.call(void 0, \n    store.subscribe,\n    getter,\n    getter,\n    identity2,\n    shallow2\n  );\n  return state;\n}\nfunction useHistoryVersionsSuspense() {\n  const client = useClient();\n  const room = useRoom();\n  const store = getRoomExtrasForClient(client).store;\n  use(store.waitUntilRoomVersionsLoaded(room.id));\n  const result = useHistoryVersions();\n  _core.assert.call(void 0, !result.error, \"Did not expect error\");\n  _core.assert.call(void 0, !result.isLoading, \"Did not expect loading\");\n  return result;\n}\nfunction useUpdateRoomNotificationSettings() {\n  const client = useClient();\n  const room = useRoom();\n  return React4.useCallback(\n    (settings) => {\n      const { store, onMutationFailure } = getRoomExtrasForClient(client);\n      const optimisticUpdateId = store.addOptimisticUpdate({\n        type: \"update-notification-settings\",\n        roomId: room.id,\n        settings\n      });\n      room.updateNotificationSettings(settings).then(\n        (settings2) => {\n          store.updateRoomNotificationSettings_confirmOptimisticUpdate(\n            room.id,\n            optimisticUpdateId,\n            settings2\n          );\n        },\n        (err) => onMutationFailure(\n          err,\n          optimisticUpdateId,\n          (error) => new UpdateNotificationSettingsError(error, {\n            roomId: room.id\n          })\n        )\n      );\n    },\n    [client, room]\n  );\n}\nfunction ensureNotServerSide() {\n  if (typeof window === \"undefined\") {\n    throw new Error(\n      \"You cannot use the Suspense version of this hook on the server side. Make sure to only call them on the client side.\\nFor tips, see https://liveblocks.io/docs/api-reference/liveblocks-react#suspense-avoid-ssr\"\n    );\n  }\n}\nfunction useSuspendUntilPresenceReady() {\n  ensureNotServerSide();\n  const room = useRoom();\n  use(room.waitUntilPresenceReady());\n}\nfunction useSelfSuspense(selector, isEqual) {\n  useSuspendUntilPresenceReady();\n  return useSelf(\n    selector,\n    isEqual\n  );\n}\nfunction useOthersSuspense(selector, isEqual) {\n  useSuspendUntilPresenceReady();\n  return useOthers(\n    selector,\n    isEqual\n  );\n}\nfunction useOthersConnectionIdsSuspense() {\n  useSuspendUntilPresenceReady();\n  return useOthersConnectionIds();\n}\nfunction useOthersMappedSuspense(itemSelector, itemIsEqual) {\n  useSuspendUntilPresenceReady();\n  return useOthersMapped(itemSelector, itemIsEqual);\n}\nfunction useOtherSuspense(connectionId, selector, isEqual) {\n  useSuspendUntilPresenceReady();\n  return useOther(connectionId, selector, isEqual);\n}\nfunction useSuspendUntilStorageReady() {\n  ensureNotServerSide();\n  const room = useRoom();\n  use(room.waitUntilStorageReady());\n}\nfunction useStorageSuspense(selector, isEqual) {\n  useSuspendUntilStorageReady();\n  return useStorage(\n    selector,\n    isEqual\n  );\n}\nfunction useStorageStatusSuspense(options) {\n  useSuspendUntilStorageReady();\n  return useStorageStatus(options);\n}\nfunction useThreadsSuspense(options = {\n  query: { metadata: {} }\n}) {\n  const client = useClient();\n  const room = useRoom();\n  const { store } = getRoomExtrasForClient(client);\n  use(store.waitUntilRoomThreadsLoaded(room.id, options.query));\n  const result = useThreads(options);\n  _core.assert.call(void 0, !result.error, \"Did not expect error\");\n  _core.assert.call(void 0, !result.isLoading, \"Did not expect loading\");\n  return result;\n}\nfunction selectorFor_useAttachmentUrl(state) {\n  if (state === void 0 || _optionalChain([state, 'optionalAccess', _23 => _23.isLoading])) {\n    return _nullishCoalesce(state, () => ( { isLoading: true }));\n  }\n  if (state.error) {\n    return state;\n  }\n  _core.assert.call(void 0, state.data !== void 0, \"Unexpected missing attachment URL\");\n  return {\n    isLoading: false,\n    url: state.data\n  };\n}\nfunction useAttachmentUrl(attachmentId) {\n  const room = useRoom();\n  const { attachmentUrlsStore } = room[_core.kInternal];\n  const getAttachmentUrlState = React4.useCallback(\n    () => attachmentUrlsStore.getState(attachmentId),\n    [attachmentUrlsStore, attachmentId]\n  );\n  React4.useEffect(() => {\n    void attachmentUrlsStore.get(attachmentId);\n  }, [attachmentUrlsStore, attachmentId]);\n  return _withselectorjs.useSyncExternalStoreWithSelector.call(void 0, \n    attachmentUrlsStore.subscribe,\n    getAttachmentUrlState,\n    getAttachmentUrlState,\n    selectorFor_useAttachmentUrl,\n    _client2.shallow\n  );\n}\nfunction useAttachmentUrlSuspense(attachmentId) {\n  const room = useRoom();\n  const { attachmentUrlsStore } = room[_core.kInternal];\n  const getAttachmentUrlState = React4.useCallback(\n    () => attachmentUrlsStore.getState(attachmentId),\n    [attachmentUrlsStore, attachmentId]\n  );\n  const attachmentUrlState = getAttachmentUrlState();\n  if (!attachmentUrlState || attachmentUrlState.isLoading) {\n    throw attachmentUrlsStore.get(attachmentId);\n  }\n  if (attachmentUrlState.error) {\n    throw attachmentUrlState.error;\n  }\n  const state = useSyncExternalStore2(\n    attachmentUrlsStore.subscribe,\n    getAttachmentUrlState,\n    getAttachmentUrlState\n  );\n  _core.assert.call(void 0, state !== void 0, \"Unexpected missing state\");\n  _core.assert.call(void 0, !state.isLoading, \"Unexpected loading state\");\n  _core.assert.call(void 0, !state.error, \"Unexpected error state\");\n  return {\n    isLoading: false,\n    url: state.data,\n    error: void 0\n  };\n}\nfunction createRoomContext(client) {\n  return getOrCreateRoomContextBundle(client);\n}\nvar _RoomProvider = RoomProvider;\nvar _useBroadcastEvent = useBroadcastEvent;\nvar _useOthersListener = useOthersListener;\nvar _useRoom = useRoom;\nvar _useIsInsideRoom = useIsInsideRoom;\nvar _useAddReaction = useAddReaction;\nvar _useMutation = useMutation;\nvar _useCreateThread = useCreateThread;\nvar _useDeleteThread = useDeleteThread;\nvar _useEditThreadMetadata = useEditThreadMetadata;\nvar _useEventListener = useEventListener;\nvar _useMyPresence = useMyPresence;\nvar _useOthersMapped = useOthersMapped;\nvar _useOthersMappedSuspense = useOthersMappedSuspense;\nvar _useThreads = useThreads;\nvar _useThreadsSuspense = useThreadsSuspense;\nvar _useRoomNotificationSettings = useRoomNotificationSettings;\nvar _useRoomNotificationSettingsSuspense = useRoomNotificationSettingsSuspense;\nvar _useHistoryVersions = useHistoryVersions;\nvar _useHistoryVersionsSuspense = useHistoryVersionsSuspense;\nvar _useOther = useOther;\nfunction _useOthers(...args) {\n  return useOthers(...args);\n}\nvar _useOtherSuspense = useOtherSuspense;\nfunction _useOthersSuspense(...args) {\n  return useOthersSuspense(...args);\n}\nvar _useStorage = useStorage;\nvar _useStorageSuspense = useStorageSuspense;\nfunction _useSelf(...args) {\n  return useSelf(...args);\n}\nfunction _useSelfSuspense(...args) {\n  return useSelfSuspense(...args);\n}\nvar _useStorageRoot = useStorageRoot;\nvar _useUpdateMyPresence = useUpdateMyPresence;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexports.RoomContext = RoomContext; exports.ClientContext = ClientContext; exports.getUmbrellaStoreForClient = getUmbrellaStoreForClient; exports.useClient = useClient; exports.LiveblocksProvider = LiveblocksProvider; exports.createLiveblocksContext = createLiveblocksContext; exports.useInboxNotifications = useInboxNotifications; exports.useInboxNotificationsSuspense = useInboxNotificationsSuspense; exports.useMarkAllInboxNotificationsAsRead = useMarkAllInboxNotificationsAsRead; exports.useMarkInboxNotificationAsRead = useMarkInboxNotificationAsRead; exports.useDeleteAllInboxNotifications = useDeleteAllInboxNotifications; exports.useDeleteInboxNotification = useDeleteInboxNotification; exports.useUnreadInboxNotificationsCount = useUnreadInboxNotificationsCount; exports.useUnreadInboxNotificationsCountSuspense = useUnreadInboxNotificationsCountSuspense; exports.useRoomInfo = useRoomInfo; exports.useRoomInfoSuspense = useRoomInfoSuspense; exports._useInboxNotificationThread = _useInboxNotificationThread; exports._useUser = _useUser; exports._useUserSuspense = _useUserSuspense; exports._useUserThreads_experimental = _useUserThreads_experimental; exports._useUserThreadsSuspense_experimental = _useUserThreadsSuspense_experimental; exports.CreateThreadError = CreateThreadError; exports.useStatus = useStatus; exports.useStorageStatus = useStorageStatus; exports.useBatch = useBatch; exports.useLostConnectionListener = useLostConnectionListener; exports.useErrorListener = useErrorListener; exports.useHistory = useHistory; exports.useUndo = useUndo; exports.useRedo = useRedo; exports.useCanUndo = useCanUndo; exports.useCanRedo = useCanRedo; exports.useOthersConnectionIds = useOthersConnectionIds; exports.useCommentsErrorListener = useCommentsErrorListener; exports.useCreateComment = useCreateComment; exports.useEditComment = useEditComment; exports.useDeleteComment = useDeleteComment; exports.useRemoveReaction = useRemoveReaction; exports.useMarkThreadAsRead = useMarkThreadAsRead; exports.useMarkThreadAsResolved = useMarkThreadAsResolved; exports.useMarkThreadAsUnresolved = useMarkThreadAsUnresolved; exports.useThreadSubscription = useThreadSubscription; exports.useHistoryVersionData = useHistoryVersionData; exports.useUpdateRoomNotificationSettings = useUpdateRoomNotificationSettings; exports.useOthersConnectionIdsSuspense = useOthersConnectionIdsSuspense; exports.useStorageStatusSuspense = useStorageStatusSuspense; exports.useAttachmentUrl = useAttachmentUrl; exports.useAttachmentUrlSuspense = useAttachmentUrlSuspense; exports.createRoomContext = createRoomContext; exports._RoomProvider = _RoomProvider; exports._useBroadcastEvent = _useBroadcastEvent; exports._useOthersListener = _useOthersListener; exports._useRoom = _useRoom; exports._useIsInsideRoom = _useIsInsideRoom; exports._useAddReaction = _useAddReaction; exports._useMutation = _useMutation; exports._useCreateThread = _useCreateThread; exports._useDeleteThread = _useDeleteThread; exports._useEditThreadMetadata = _useEditThreadMetadata; exports._useEventListener = _useEventListener; exports._useMyPresence = _useMyPresence; exports._useOthersMapped = _useOthersMapped; exports._useOthersMappedSuspense = _useOthersMappedSuspense; exports._useThreads = _useThreads; exports._useThreadsSuspense = _useThreadsSuspense; exports._useRoomNotificationSettings = _useRoomNotificationSettings; exports._useRoomNotificationSettingsSuspense = _useRoomNotificationSettingsSuspense; exports._useHistoryVersions = _useHistoryVersions; exports._useHistoryVersionsSuspense = _useHistoryVersionsSuspense; exports._useOther = _useOther; exports._useOthers = _useOthers; exports._useOtherSuspense = _useOtherSuspense; exports._useOthersSuspense = _useOthersSuspense; exports._useStorage = _useStorage; exports._useStorageSuspense = _useStorageSuspense; exports._useSelf = _useSelf; exports._useSelfSuspense = _useSelfSuspense; exports._useStorageRoot = _useStorageRoot; exports._useUpdateMyPresence = _useUpdateMyPresence;\n//# sourceMappingURL=chunk-3MM4G6XB.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireWildcard","obj","__esModule","newObj","key","Object","prototype","hasOwnProperty","call","default","_nullishCoalesce","lhs","rhsFn","_optionalChain","ops","lastAccessLHS","undefined","value","i","length","op","fn","args","useIsInsideRoom","React","useContext","room","RoomContext","shallow2","a","b","_core","isPlainObject","shallow","keysA","keys","every","useLatest","ref","_react","useRef","useEffect","current","useInitial","useReducer","noop","useInitialUnlessFunction","latestValue","frozenValue","useCallback","autobind","self","seen","Set","add","constructor","Reflect","ownKeys","has","descriptor","getOwnPropertyDescriptor","_","bind","getPrototypeOf","makeThreadsFilter","query","thread","resolved","matchesMetadata","q","metadata","entries","startsWith","sanitizeThread","deletedAt","comments","some","hasComment","c","Date","makeRoomThreadsQueryKey","roomId","stringify","makeUserThreadsQueryKey","usify","promise","status","then","err","reason","internalToExternalState","state","rawThreadsDB","threadsDB","clone","notificationsById","settingsByRoomId","optimisticUpdate","optimisticUpdates","type","upsert","get","threadId","updatedAt","comment","applyUpsertComment","inboxNotification","values","find","notification","kind","id","notifiedAt","createdAt","readAt","applyDeleteComment","commentId","applyAddReaction","reaction","applyRemoveReaction","emoji","userId","removedAt","ibn","inboxNotificationId","settings","cleanedNotifications","filter","sort","getTime","versionsByRoomId","applyThreadDeltaUpdates","db","updates","newThreads","forEach","upsertIfNewer","deletedThreads","getEvenIfDeleted","existing","delete","applyNotificationsUpdates","existingInboxNotifications","updatedInboxNotifications","newInboxNotifications","existingNotification","result","deletedNotifications","console","warn","existingComment","existingComment2","updatedThread","Math","max","editedAt","updatedComments","map","_5","_6","_7","body","attachments","reactions","upsertReaction","users","user","existingReaction","existingReaction2","missingUserError","Error","missingRoomInfoError","identity","x","selectorFor_useUnreadInboxNotificationsCount","inboxNotifications","count","isLoading","selectorFor_useUser","_8","error","data","selectorFor_useRoomInfo","_9","info","getUmbrellaStoreForClient","client","store","_umbrellaStores","UmbrellaStore","set","getLiveblocksExtrasForClient","extras","_extras","makeLiveblocksExtrasForClient","notificationsPoller","makePoller","signal","fetchNotificationsDeltaUpdate","String","config","NOTIFICATIONS_POLL_INTERVAL","maxStaleTimeMs","NOTIFICATIONS_MAX_STALE_TIME","userThreadsPoller","fetchUserThreadsDeltaUpdate","USER_THREADS_POLL_INTERVAL","USER_THREADS_MAX_STALE_TIME","makeLiveblocksContextBundle","LiveblocksProvider2","props","useEnsureNoLiveblocksProvider","createElement","ClientContext","Provider","children","useInboxNotificationThread2","useInboxNotificationThread_withClient","useMarkInboxNotificationAsRead2","useMarkInboxNotificationAsRead_withClient","useMarkAllInboxNotificationsAsRead2","useMarkAllInboxNotificationsAsRead_withClient","useDeleteInboxNotification2","useDeleteInboxNotification_withClient","useDeleteAllInboxNotifications2","useDeleteAllInboxNotifications_withClient","shared","createSharedContext","bundle","LiveblocksProvider","useInboxNotifications","useInboxNotifications_withClient","useUnreadInboxNotificationsCount","useMarkInboxNotificationAsRead","useMarkAllInboxNotificationsAsRead","useDeleteInboxNotification","useDeleteAllInboxNotifications","useInboxNotificationThread","useUserThreads_experimental","classic","suspense","useInboxNotificationsSuspense_withClient","useUnreadInboxNotificationsCountSuspense_withClient","useUserThreadsSuspense_experimental","selector","isEqual","poller","waitUntilNotificationsLoaded","inc","pollNowIfStale","dec","_withselectorjs","useSyncExternalStoreWithSelector","subscribe","getInboxNotificationsLoadingState","use","assert","optimisticUpdateId","addOptimisticUpdate","markInboxNotificationAsRead","updateInboxNotification","removeOptimisticUpdate","markAllInboxNotificationsAsRead","updateAllInboxNotifications","deleteInboxNotification","deleteAllInboxNotifications","getter","getFullState","raise","useUser_withClient","usersStore","kInternal","getUserState","getState","useUserSuspense_withClient","userState","_indexjs","useSyncExternalStore","useRoomInfo_withClient","roomsInfoStore","getRoomInfoState","useRoomInfoSuspense_withClient","roomInfoState","useClient2","useClient","useUser","useRoomInfo","options","_10","allowNesting","LiveblocksProviderWithClient","waitUntilUserThreadsLoaded","getUserThreadsLoadingState","handleScrollToCommentOnLoad","shouldScrollOnLoad","threads","window","location","hash","slice","document","getElementById","flatMap","isCommentInThreads","comment2","scrollIntoView","useScrollToCommentOnLoadEffect","React3","useSyncExternalStore2","s","gs","gss","identity2","alwaysEmptyList","STABLE_EMPTY_LIST","alwaysNull","selectorFor_useOthersConnectionIds","others","connectionId","makeMutationContext","storage","mutableRoot","getStorageSnapshot","needsStorage","getSelf","needsPresence","getOthers","setMyPresence","updatePresence","getCurrentUserId","handleApiError","message","_11","details","_12","detailedMessage","suggestion","docs","Boolean","join","getRoomExtrasForClient","_extras2","makeRoomExtrasForClient","commentsErrorEventSource","makeEventSource","threadsPollersByRoomId","Map","versionsPollersByRoomId","roomNotificationSettingsPollersByRoomId","observable","onMutationFailure","innerError","createPublicError","HttpError","notify","getOrCreateThreadsPollerForRoomId","fetchRoomThreadsDeltaUpdate","ROOM_THREADS_POLL_INTERVAL","ROOM_THREADS_MAX_STALE_TIME","getOrCreateVersionsPollerForRoomId","fetchRoomVersionsDeltaUpdate","HISTORY_VERSIONS_POLL_INTERVAL","HISTORY_VERSIONS_MAX_STALE_TIME","getOrCreateNotificationsSettingsPollerForRoomId","refreshRoomNotificationSettings","NOTIFICATION_SETTINGS_POLL_INTERVAL","NOTIFICATION_SETTINGS_MAX_STALE_TIME","makeRoomContextBundle","RoomProvider_withImplicitLiveblocksProvider","React4","RoomProvider","defineProperty","useRoom","useStatus","useStorageStatus","useBatch","useBroadcastEvent","useOthersListener","useLostConnectionListener","useErrorListener","useEventListener","useHistory","useUndo","useRedo","useCanRedo","useCanUndo","useStorageRoot","useStorage","useSelf","useMyPresence","useUpdateMyPresence","useOthers","useOthersMapped","useOthersConnectionIds","useOther","useMutation","useThreads","useCreateThread","useDeleteThread","useEditThreadMetadata","useMarkThreadAsResolved","useMarkThreadAsUnresolved","useCreateComment","useEditComment","useDeleteComment","useAddReaction","useRemoveReaction","useMarkThreadAsRead","useThreadSubscription","useAttachmentUrl","useHistoryVersions","useHistoryVersionData","useRoomNotificationSettings","useUpdateRoomNotificationSettings","useStorageStatusSuspense","useStorageSuspense","useSelfSuspense","useOthersSuspense","useOthersMappedSuspense","useOthersConnectionIdsSuspense","useOtherSuspense","useThreadsSuspense","useAttachmentUrlSuspense","useHistoryVersionsSuspense","useRoomNotificationSettingsSuspense","useCommentsErrorListener","enumerable","cache","useState","stableEnterRoom","cached","rv","enterRoom","origLeave","leave","rv.leave","RoomProviderInner","majorReactVersion","parseInt","version","oldReactVersion","errorIf","unstable_batchedUpdates","JSON","deprecateIf","superfluous_unstable_batchedUpdates","frozenProps","initialPresence","initialStorage","autoConnect","setRoomLeavePair","handleCommentEvent","ServerMsgCode","THREAD_DELETED","deleteThread","getThread","existingThread","COMMENT_EDITED","THREAD_METADATA_UPDATED","THREAD_UPDATED","COMMENT_REACTION_ADDED","COMMENT_REACTION_REMOVED","COMMENT_DELETED","updateThreadAndNotification","COMMENT_CREATED","events","pair","room2","connect","getStatus","smooth","_13","useStorageStatusSmooth","useStorageStatusImmediate","storageStatus","getStorageStatus","setStatus","oldStatus","timeoutId","unsub","newStatus","setTimeout","SMOOTH_DELAY","clearTimeout","batch","event","shouldQueueEventIfNotReady","broadcastEvent","callback","savedCallback","lostConnection","e","customEvent","eventData","listener","history","undo","redo","canUndo","canRedo","maybeSelector","getSnapshot","wrappedSelector","me","getPresence","presence","myPresence","itemSelector","itemIsEqual","other","wrappedIsEqual","eq","is","atuple","index","btuple","_client2","other2","other3","NOT_FOUND","prev","curr","useMutableStorageRoot","storageDidLoad","subscribeOnce","rootOrNull","rootOrNull2","onStoreChange","isDeep","noop3","toImmutable","imm","deps","useMemo","scrollOnLoad","waitUntilRoomThreadsLoaded","getRoomThreadsLoadingState","createThreadId","createCommentId","newComment","newThread","attachmentIds","_14","_15","attachment","createThread","err2","CreateThreadError","_16","_17","_18","DeleteThreadError","editThreadMetadata","metadata2","patchThread","EditThreadMetadataError","_19","_20","createComment","CreateCommentError","_21","_22","editComment","editedComment","EditCommentError","deleteComment","DeleteCommentError","addReaction","addedReaction","AddReactionError","removeReaction","RemoveReactionError","inboxNotification2","now","MarkInboxNotificationAsReadError","markThreadAsResolved","MarkThreadAsResolvedError","markThreadAsUnresolved","MarkThreadAsUnresolvedError","unreadSince","updateRoomNotificationSettings","waitUntilRoomNotificationSettingsLoaded","getNotificationSettingsLoadingState","versionId","setState","load","buffer","arrayBuffer","response","getTextVersion","Uint8Array","getRoomVersionsLoadingState","waitUntilRoomVersionsLoaded","updateNotificationSettings","settings2","updateRoomNotificationSettings_confirmOptimisticUpdate","UpdateNotificationSettingsError","ensureNotServerSide","useSuspendUntilPresenceReady","waitUntilPresenceReady","useSuspendUntilStorageReady","waitUntilStorageReady","selectorFor_useAttachmentUrl","_23","url","attachmentId","attachmentUrlsStore","getAttachmentUrlState","attachmentUrlState","createContext","v","_asc","SortedList","from","t1","t2","d1","d2","_desc","_byId","_version","newPool","_ThreadDB","_2","toRemove","remove","touch","findMany","direction","crit","push","t","Array","pred","ThreadDB","noop2","Promise","resolve","ASYNC_LOADING","freeze","PaginatedResource","fetchPage","_paginationState","_cachedPromise","_fetchPage","_eventSource","_pendingFetchMore","patchPaginationState","patch","_fetchMore","_3","cursor","isFetchingMore","nextCursor","fetchMoreError","fetchMore","_4","finally","usable","hasFetchedAll","waitUntilLoaded","initialFetcher","autoRetry","SinglePageResource","_prevVersion","_notificationsLastRequestedAt","_stateCached","_prevState","_roomThreadsLastRequestedAtByRoom","_roomThreads","_userThreadsLastRequestedAt","_userThreads","_roomVersions","_roomVersionsLastRequestedAtByRoom","_roomNotificationSettings","_client","as","_notifications","inboxFetcher","getInboxNotifications","updateThreadsAndNotifications","requestedAt","_store","_rawThreadsDB","createStore","rawState","queryKey","paginatedResource","asyncResult","page","resource","nn","versions","_hasOptimisticUpdates","mutateThreadsDB","mutate","old","updateInboxNotificationsCache","mapFn","setNotificationSettings","updateRoomVersions","versionsById","fromEntries","version2","updateOptimisticUpdatesCache","force_set","mapValues","removed","newCache","updateThread","compactObject","deletedInboxNotifications","nanoid","newUpdate","ou","lastRequestedAt","getInboxNotificationsSince","since","updated","deleted","threadsFetcher","getRoom","getThreads","getThreadsSince","getUserThreads_experimental","getUserThreadsSince_experimental","versionsFetcher","listTextVersions","listTextVersionsSince","notificationSettingsFetcher","getNotificationSettings","WeakMap","_bundles","_useUserThreads_experimental","_useUserThreadsSuspense_experimental","cause","context","name","_bundles2","Symbol","_RoomProvider","_useBroadcastEvent","_useOthersListener","_useRoom","_useAddReaction","_useMutation","_useCreateThread","_useDeleteThread","_useEditThreadMetadata","_useEventListener","_useMyPresence","_useOthersMapped","_useOthersMappedSuspense","_useThreads","_useThreadsSuspense","_useRoomNotificationSettings","_useRoomNotificationSettingsSuspense","_useHistoryVersions","_useHistoryVersionsSuspense","_useOther","_useOtherSuspense","_useStorage","_useStorageSuspense","_useStorageRoot","_useUpdateMyPresence","o","publicApiKey","throttle","lostConnectionTimeout","backgroundKeepAliveTimeout","polyfills","unstable_fallbackToHTTP","unstable_streamData","authEndpoint","resolveMentionSuggestions","resolveUsers","resolveRoomsInfo","baseUrl","enableDebugLogging","createClient","createLiveblocksContext","useInboxNotificationsSuspense","useUnreadInboxNotificationsCountSuspense","useRoomInfoSuspense","_useInboxNotificationThread","_useUser","_useUserSuspense","useUserSuspense","createRoomContext","_useIsInsideRoom","_useOthers","_useOthersSuspense","_useSelf","_useSelfSuspense"]
}
