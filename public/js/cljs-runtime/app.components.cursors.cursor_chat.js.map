{"version":3,"sources":["app/components/cursors/cursor_chat.cljs"],"mappings":";AAKA,mDAAA,nDAAMA,8GACHC,MAAMC,mBAAmBC;AAD5B,AAEE,IAAMC,UAAQ,AAAA,AAAIH;IACZG,cAAQA;AADd,AAEE,IAAAC,iBAAA,aAAkCD;AAAlC,AAAA,qGAAAC,gDAAAA,pJAACH,mDAAAA,mEAAAA;;AACD,wFAAA,jFAACI,mDAAMH,aAAaI,sFACb,WAAKC;AAAL,mGACMA,9CACA,oDAAA,pDAACC,+GAAgBL,pKACjB,iLAAA,oDAAA,9NAACK;;;AAElB,qDAAA,rDAAMC,kHACHT,MAAME;AADT,AAEE,IAAMC,UAAQ,AAAA,AAAIH;AAAlB,AACE,GACE,uDAAA,vDAACU,6CAAE,AAAIV;AACP,wFAAA,jFAACK,mDAAMH,aAAaI,sFACb,WAAKC;AAAL,iJACMA,9CACA,oDAAA,pDAACC,iIAAyBL,/KAC1B,wLAAA,2DAAA,nPAACK,rDACD,4SAAA,oDAAA,zVAACA;;;AAPhB,GASE,uDAAA,vDAACE,6CAAE,AAAIV;AACP,wFAAA,jFAACK,mDAAMH,aAAaI,sFACb,WAAKC;AAAL,qDACMA,rDACA,2DAAA,oDAAA,xGAACC;;;AAbhB;;;;AAeJ,0CAAA,1CAAMG;AAAN,AAEE,kBAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;aAAA,AAAAE,4CAAAF,eAAA,pEAAaG;mBAAb,AAAAD,4CAAAF,eAAA,1EAAoBX;yBAApB,AAAAa,4CAAAF,eAAA,hFAAiCZ;AAAjC,AACE,IAAAgB,aAAoBD;IAApBC,iBAAA,AAAAH,4BAAAG;QAAA,AAAAF,4CAAAE,eAAA,/DAAcE;QAAd,AAAAJ,4CAAAE,eAAA,/DAAgBG;IACVC,YAAU,gDAAA,hDAACC;IADjBJ,aAE8C,AAAA,mGAAA,AAAAO,gBAAgBvB;IAF9DgB,iBAAA,AAAAJ,4BAAAI;uBAAA,AAAAH,4CAAAG,eAAA,9EAEcK;WAFd,AAAAR,4CAAAG,eAAA,lEAE+BM;cAF/B,AAAAT,4CAAAG,eAAA,rEAEoCf;AAFpC,AAGE,AAACuB,0BACA;AAAA,AACE,oBAAA,AAAAD,gBAAOJ;AAAP,AACE,OAAA,AAAAI,gBAASJ;;AADX;;;;AAEH,6DAAA,mFAAA,mDAAA,2CAAA,gEAAA,wBAAA,uDAAA,2CAAA,jaAACM,geAE0B,CAAA,6DAAA,iEAAA,pEAAmBR,iEAAoBC,mCAChE,YAAA,ZAACQ,oCAAuCJ,MACxC,2GAAA,AAAA,mFAAA,mDAAA,0HAAA,2CAAA,uDAAA,uBAAA,mFAAA,mDAAA,2CAAA,gEAAA,+IAAA,mFAAA,8CAAA,2CAAA,gEAAA,8CAAA,mFAAA,sDAAA,2CAAA,gEAAA,oFAAA,mDAAA,WAAAK,lgDAAM,kDAAA,lDAACnB,6CAAEc,qRAELQ,iyBAG8BT;AALlC,AAO2B,uCAAAM,hCAACI,sBAAOZ;GAPnC,mEAAA,oEAAA,WAAAS,vFAQ0B3B;AAR1B,AAS2B,0DAAA2B,nDAACrB,oEAAkBP;GAT9C,+DAAA,WAAA6B;AAAA,AAU2B,wDAAAA,jDAAChC,kEAAgBE,mBAAmBC;GAV/D,mEAW0B,AAAA;iCAX1B","names":["app.components.cursors.cursor-chat/handle-change","event","update-my-presence","cursor-state","message","G__12393","cljs.core.swap_BANG_","cljs.core/update","state","cljs.core.assoc","app.components.cursors.cursor-chat/handle-key-down","cljs.core._EQ_","app.components.cursors.cursor-chat/view","p__12397","map__12398","cljs.core/--destructure-map","cljs.core.get","cursor","map__12399","map__12400","x","y","input-ref","reagent.core.atom","previous-message","mode","cljs.core/deref","reagent.core/after-render","reagent.core.as_element","js/console.log","p1__12394#","p1__12395#","p1__12396#","app.components.cursors.cursor-svg/view","cljs.core/reset!"],"sourcesContent":["(ns app.components.cursors.cursor-chat\n  (:require \n   [app.components.cursors.cursor-svg :as cursor-svg]\n   [reagent.core :as r]))\n\n(defn handle-change\n  [event update-my-presence cursor-state]\n  (let [message (-> event .-target .-value)\n        message message]\n    (update-my-presence #js {:message message})\n    (swap! cursor-state update :cursor-state\n           (fn [state]\n             (-> state\n                 (assoc  :message message)\n                 (assoc  :mode    :chat))))))\n\n(defn handle-key-down\n  [event cursor-state]\n  (let [message (-> event .-target .-value)]\n    (cond\n      (= (-> event .-key) \"Enter\")\n      (swap! cursor-state update :cursor-state\n             (fn [state]\n               (-> state\n                   (assoc  :previous-message message)\n                   (assoc  :message          \"\")\n                   (assoc  :mode             :hidden))))\n\n      (= (-> event .-key) \"Escape\")\n      (swap! cursor-state update :cursor-state\n             (fn [state]\n               (-> state\n                   (assoc  :mode    :hidden)))))))\n\n(defn view\n  []\n  (fn [{:keys [cursor cursor-state update-my-presence]}]\n    (let [{:keys [x y]} cursor\n          input-ref (r/atom nil)\n          {:keys [previous-message mode message]} (:cursor-state @cursor-state)]\n      (r/after-render\n       (fn []\n         (when @input-ref\n           (.focus @input-ref))))\n      (r/as-element\n       [:div {:className \"absolute top-0 left-0\"\n              :style {:transform (str \"translateX(\" x \"px) translateY(\" y \"px)\")}}\n        (js/console.log \"cursor mode changed: \" mode)\n        (when (= mode :chat)\n          [:div\n           [cursor-svg/view {:color \"#000\"}]\n           [:div {:className \"absolute left-2 top-5 bg-blue-500 px-4 py-2 text-sm \n                                     leading-relaxed text-white rounded-[20px]\"}\n            [:p {:className \"text-white\"} previous-message]\n            [:input {:className \"z-10 w-60 border-none bg-transparent text-white placeholder-blue-300 outline-none\"\n                     :ref         #(reset! input-ref %)\n                     :message     message\n                     :on-key-down #(handle-key-down % cursor-state)\n                     :on-change   #(handle-change % update-my-presence cursor-state)\n                     :placeholder (if \"previous-message\"\n                                    \"\"\n                                    \"Type a message...\")}]]])]))))"]}